import{aP as B,v as F,x as K,V as Q,c as L,m as T,d as W}from"./Identifiable-BjM0PfdN.js";import{s as X,r as D}from"./Cyclical-B0bcmwRe.js";import{f as G,o as H}from"./quantityUtils-63xE9umB.js";import{j as u}from"./elevationInfoUtils-BM_SdJ-M.js";import{p as y,N as g,n as _,s as m,o as M,b as C,m as b,q as R,M as z,J as Y,r as ee,I as q,e as I,j as te,t as ie,i as re,E as se}from"./hitTestSelectUtils-CCAzSamd.js";import{m as A,b as J,e as Z,j as oe,p as ne,d as pe,_ as he}from"./vec2-ChnYg_BJ.js";import{s as x,r as ae,g as de,p as $,d as le,o as ce,f as me}from"./RouteLayerInteraction-DD57Onr-.js";import{n as N}from"./vec2f64-Cgb6qxNH.js";import{q as ge,c as fe,o as ue}from"./vec32-rHWgUfNj.js";import"./index-CVvIVqY1.js";import"./ElevationInfo-B2ksLwBj.js";import"./fieldUtils-Br-fPSxS.js";import"./lengthUtils-BDJ7rNGW.js";import"./projectVectorToVector-yd877UiC.js";import"./projectionUtils-D3_kHwH-.js";import"./projectPointToVector-yyeyeVyg.js";import"./geodesicUtils-Cr-plA6M.js";import"./Layer-CUjb8Y3m.js";import"./Query-duJofNa2.js";import"./jsonUtils-DBuABSQZ.js";import"./typeUtils-U-Zf11cK.js";import"./Field-FVkerAtx.js";import"./fieldType-ClovGbuQ.js";import"./MapView-XXhq0wAO.js";import"./CollectionFlattener-CiW0r4Pq.js";import"./workers-BNUpPbJD.js";import"./Queue-DILFUEQB.js";import"./intl-ByqrfC_d.js";import"./number-CsIuR4Me.js";import"./TileInfo-gIGeOzNG.js";import"./TileKey-DZd6gJy7.js";import"./jsxFactory-D4gVuCa_.js";import"./uuid-Cl5lrJ4c.js";import"./sanitizerUtils-CJlLEeXg.js";import"./UpdatingHandles-DdU5IX8L.js";import"./asyncUtils-zc5DpkIL.js";import"./signal-CHoLd7Dm.js";import"./Map-C7AlwcQg.js";import"./Basemap-DEy_TBwO.js";import"./loadAll-tu8QdrIx.js";import"./PortalItem-5OKFVWCx.js";import"./writeUtils-DJnvrJq1.js";import"./layerUtils-CmDKJw7q.js";import"./persistable-Dy9UTZKT.js";import"./MD5-C9MwAd2G.js";import"./multiOriginJSONSupportUtils-C0wm8_Yw.js";import"./resourceExtension-B5tMzp3X.js";import"./PolygonCollection-CkOPuE2h.js";import"./mat4f32-Djp3mnm5.js";import"./mat4-C8ai-EIY.js";import"./common-DQOJ18NT.js";import"./TablesMixin-N_koq_xq.js";import"./GraphicsCollection-B9Sj62PJ.js";import"./Graphic-C2Bnzy89.js";import"./PopupTemplate-CF36_3mn.js";import"./createFeatureId-BiB9j2WD.js";import"./typeUtils-CP9PJ8Sp.js";import"./SimpleMarkerSymbol-D-X_CJ8B.js";import"./screenUtils-aQeO9QTD.js";import"./aaBoundingBox-BrXqvn3i.js";import"./TextSymbol-DPyc43q3.js";import"./PictureMarkerSymbol-DOPylmLK.js";import"./HeightModelInfo-BaIW4m76.js";import"./timeZoneUtils-DMYcWBGI.js";import"./ReactiveMap-sVzP5DGX.js";import"./ViewingMode-Chk7YAAL.js";import"./enums-BuAlJCBy.js";import"./TileKey-DR2srngJ.js";import"./quickselect-QQC62dOK.js";import"./normalizeUtils-DfEBCyY7.js";import"./normalizeUtilsCommon-Bp_cDVNc.js";import"./utils-C83x6Enz.js";import"./utils-CFSOSud-.js";import"./mat3-CruJiiUv.js";import"./vec2f32-CaVKkSa6.js";import"./Scheduler-COHy2lsX.js";import"./unitBezier-B1N-tmtC.js";import"./definitions-CASyCajO.js";import"./enums-UBzvFP7O.js";import"./Texture-I7zBxmlP.js";import"./getDataTypeBytes-D2DiHx_d.js";import"./imageUtils-CKvAsRxn.js";import"./capabilities-Cggz07g5.js";import"./ILyr3DWasmPerSceneView-CIC-HPGZ.js";import"./Version-CWer4Z2d.js";import"./vec42-CKs01hkn.js";import"./vec4f64-DPb6J-GU.js";import"./plane-D3quJIjf.js";import"./vectorStacks-DgNdV_6b.js";import"./mat3f64-B5o_lm6j.js";import"./mat4f64-q_b6UJoq.js";import"./quatf64-aQ5IuZRd.js";import"./sphere-mLO_dKdC.js";import"./spatialReferenceEllipsoidUtils-BYFAq5u2.js";import"./GraphicsLayer-B5Y1O4UM.js";import"./BlendLayer-DF9cB_oM.js";import"./layerContainerType-C5CzMsLd.js";import"./jsonUtils-DU1z6yLO.js";import"./parser-BAKViB6V.js";import"./ScaleRangeLayer-YHoThhHM.js";import"./Stop-CYiQeHox.js";import"./networkEnums-BEjCt5UC.js";import"./geodeticLengthOperator-BlQK6vk8.js";import"./geodeticCurveType-CirnHLSB.js";import"./earcut-D9gy186-.js";import"./triangle-DlAvmH7a.js";import"./lineSegment-CP3RFx1A.js";class k{constructor(i,e){this.view=i,this.options=e,this.squaredShortLineThreshold=y.shortLineThreshold*y.shortLineThreshold}snap(i,e){return e.vertexHandle!=null?e.vertexHandle.type!=="vertex"?[]:this.snapExistingVertex(i,e):this.snapNewVertex(i,e)}edgeExceedsShortLineThreshold(i,e){return this.exceedsShortLineThreshold(g(i.leftVertex.pos,this.view,e),g(i.rightVertex.pos,this.view,e),e)}exceedsShortLineThreshold(i,e,{spatialReference:t}){return this.squaredShortLineThreshold===0||_(x(e,t,u,this.view),x(i,t,u,this.view))>this.squaredShortLineThreshold}isVertical(i,e,{spatialReference:t}){const r=B(t);return A(m(i),m(e))*r<y.verticalLineThresholdMeters}squaredProximityThreshold(i){return i==="touch"?this._squaredTouchProximityThreshold:this._squaredMouseProximityThreshold}get _squaredMouseProximityThreshold(){return this.options.distance*this.options.distance}get _squaredTouchProximityThreshold(){const{distance:i,touchSensitivityMultiplier:e}=this.options,t=i*e;return t*t}}class xe extends k{constructor(i,e,t){super(i,e),this._geodesicLengthMeasurementUtils=t}snapNewVertex(i,e){const t=e.editGeometryOperations.data.components[0],r=t.edges.length,s=[];if(r<1)return s;const{spatialReference:o}=e,p=x(i,o,u,this.view),{view:n}=this,h=t.edges[r-1];let a=h;do{if(this.edgeExceedsShortLineThreshold(a,e)){const l=M(a,n,e);this._processCandidateProposal(l.left,l.right,i,p,e,s)}a=a.leftVertex.leftEdge}while(a&&a!==h);return s}snapExistingVertex(i,e){const t=[],r=e.vertexHandle,s=r.component;if(s.edges.length<2)return t;const{view:o}=this,{spatialReference:p}=e,n=x(i,p,u,o),h=r.leftEdge,a=r.rightEdge;h&&a&&this.edgeExceedsShortLineThreshold(h,e)&&this.edgeExceedsShortLineThreshold(a,e)&&this._processCandidateProposal(g(h.leftVertex.pos,o,e),g(a.rightVertex.pos,o,e),i,n,e,t);const l=s.edges[0];let c=l;do{if(c!==r.leftEdge&&c!==r.rightEdge&&this.edgeExceedsShortLineThreshold(c,e)){const f=M(c,o,e);this._processCandidateProposal(f.left,f.right,i,n,e,t)}c=c.rightVertex.rightEdge}while(c&&c!==l);return t}_processCandidateProposal(i,e,t,r,s,o){var l;const{spatialReference:p,pointer:n}=s,h=F();ve(h,i,e,t,s,this._geodesicLengthMeasurementUtils);const a=C(b(h));_(r,x(a,p,u,this.view))<this.squaredProximityThreshold(n)&&o.push(new ae({lineStart:i,lineEnd:e,targetPoint:a,isDraped:((l=s.elevationInfo)==null?void 0:l.mode)==="on-the-ground"}))}}function ve(d,i,e,t,r,s){Ee(d,i,e,t,r,s)||we(d,t,i,e)}function Ee(d,i,e,t,{spatialReference:r},s){const o=R(i,e,r,r);if(o==null)return!1;const p=R(e,t,r,r);if(p==null)return!1;const n=s.geodesicDistance(e,t,r);if(n==null)return!1;const h=Math.abs(X.shortestSignedDiff(o,p))>Math.PI/2?D.normalize(o+Math.PI):o;return z(d,e,r,G(n,"meters"),H(h,"radians","geographic"),"geodesic"),d[2]=t[2],!0}function we(d,i,e,t){Y(i,{start:e,end:t,type:ee.LINE},d),d[2]=i[2]}let Ve=class extends k{snapNewVertex(i,e){const t=e.editGeometryOperations.data.components[0],r=t.edges.length,s=t.vertices.length,o=[];if(r<2)return o;const{view:p}=this,n=x(i,e.spatialReference,u,p),h=g(t.vertices[s-1].pos,p,e),a=g(t.vertices[0].pos,p,e),l=t.edges[r-1];let c=l;do{if(this.edgeExceedsShortLineThreshold(c,e)){const f=M(c,p,e);this._checkEdgeForParallelLines(f,h,i,n,e,o),this._checkEdgeForParallelLines(f,a,i,n,e,o)}c=c.leftVertex.leftEdge}while(c&&c!==l);return o}snapExistingVertex(i,e){const t=[],r=e.vertexHandle,s=r.component;if(s.edges.length<3)return t;const{view:o}=this,p=x(i,e.spatialReference,u,o),n=r.leftEdge,h=r.rightEdge,a=s.vertices[0],l=g(a.pos,o,e),c=s.vertices.length,f=s.vertices[c-1],V=g(f.pos,o,e),P=s.edges[0];let v=P;do{if(v!==n&&v!==h&&this.edgeExceedsShortLineThreshold(v,e)){const S=M(v,o,e);n&&this._checkEdgeForParallelLines(S,g(n.leftVertex.pos,o,e),i,p,e,t),h&&this._checkEdgeForParallelLines(S,g(h.rightVertex.pos,o,e),i,p,e,t),r===a?this._checkEdgeForParallelLines(S,V,i,p,e,t):r===f&&this._checkEdgeForParallelLines(S,l,i,p,e,t)}v=v.rightVertex.rightEdge}while(v&&v!==P);return t}_checkEdgeForParallelLines(i,e,t,r,s,o){var c;const p=i.left,n=i.right;if(q(E,m(e),m(p),m(n)),J(E,m(e))<y.parallelLineThreshold)return;q(E,m(t),m(p),m(n),m(e));const{spatialReference:h,pointer:a}=s,l=C(I(E[0],E[1],t[2]));if(_(r,x(l,h,u,this.view))<this.squaredProximityThreshold(a)){if(this.isVertical(l,e,s)||this.isVertical(p,n,s)||Le(i,o))return;o.push(new de({referenceLine:i,lineStart:e,targetPoint:l,isDraped:((c=s.elevationInfo)==null?void 0:c.mode)==="on-the-ground"}))}}};function Le(d,i){const e=d.left,t=d.right;for(const r of i)if(q(E,m(t),m(r.constraint.start),m(r.constraint.end),m(e)),J(E,m(t))<y.parallelLineThreshold)return r.addReferenceLine(d),!0;return!1}const E=N();class ye extends k{constructor(i,e,t){super(i,e),this._geodesicLengthMeasurementUtils=t}snapNewVertex(i,e){const t=e.editGeometryOperations.data.components[0],r=[];if(t.vertices.length<2)return r;const{view:s}=this,o=x(i,e.spatialReference,u,s),p=t.vertices.at(-1);this._checkForSnappingCandidate($.LastVertex,r,p.leftEdge,p,p.leftEdge.leftVertex,i,o,e);const n=t.vertices[0];return this._checkForSnappingCandidate($.FirstVertex,r,n.rightEdge,n,n.rightEdge.rightVertex,i,o,e),r}snapExistingVertex(i,e){const t=[],r=e.vertexHandle;if(r.component.vertices.length<3)return t;const{view:s}=this,o=x(i,e.spatialReference,u,s),p=r.leftEdge,n=r.rightEdge;if(p!=null&&p.leftVertex.leftEdge){const h=p.leftVertex.leftEdge;this._checkForSnappingCandidate($.ExistingEdge,t,h,h.rightVertex,h.leftVertex,i,o,e)}if(n!=null&&n.rightVertex.rightEdge){const h=n.rightVertex.rightEdge;this._checkForSnappingCandidate($.ExistingEdge,t,h,h.leftVertex,h.rightVertex,i,o,e)}return t}_checkForSnappingCandidate(i,e,t,r,s,o,p,n){if(!this.edgeExceedsShortLineThreshold(t,n))return;const h=this.view,a=g(r.pos,h,n),l=g(s.pos,h,n);_e(O,l,a,o,n,this._geodesicLengthMeasurementUtils),this._checkForSnappingCandidateAlongProjectedRay(i,e,l,a,O,o,p,n)}_checkForSnappingCandidateAlongProjectedRay(i,e,t,r,s,o,p,n){var v;const{spatialReference:h,pointer:a}=n,l=Z(j,m(o),m(r)),c=oe(s,l)/ne(s),f=pe(j,m(r),s,c),V=C(I(f[0],f[1],o[2]));if(_(p,x(V,h,u,this.view))>this.squaredProximityThreshold(a)||this.isVertical(V,r,n)||this.isVertical(r,t,n))return;const P=ge(F(),r,s,Math.sign(c));e.push(new le({targetPoint:V,constraint:new te(r,b(P)),previousVertex:t,otherVertex:r,otherVertexType:ce.CENTER,selfSnappingType:i,isDraped:((v=n.elevationInfo)==null?void 0:v.mode)==="on-the-ground"}))}}function _e(d,i,e,t,r,s){Pe(d,i,e,t,r,s)||Se(d,i,e)}function Pe(d,i,e,t,{spatialReference:r},s){const o=R(i,e,r,r);if(o==null)return!1;const p=R(e,t,r,r);if(p==null)return!1;const n=Math.sign(D.shortestSignedDiff(o,p))*Math.PI*.5,h=H(o+n,"radians","geographic"),a=F(),l=s.geodesicDistance(e,t,r);return l!=null&&(z(a,e,r,G(l,"meters"),h,"geodesic"),fe(d,a,e),!0)}function Se(d,i,e){const t=Z(j,m(e),m(i));ue(d,t[1],-t[0],0)}const j=N(),O=F();let Te=class extends k{snapNewVertex(i,e){const t=e.editGeometryOperations.data.components[0],r=[],s=t.vertices.length;if(e.editGeometryOperations.data.type!=="polygon"||s<2)return r;const{view:o}=this,p=t.vertices[0],n=t.vertices[s-1],h=g(p.pos,o,e),a=g(n.pos,o,e);return this._processCandidateProposal(h,a,i,e,r),r}snapExistingVertex(i,e){const t=[],r=e.vertexHandle,s=r.component;if(s.edges.length<2||e.editGeometryOperations.data.type==="polyline"&&(r.index===0||r.index===s.vertices.length-1))return t;const{view:o}=this,p=g(r.leftEdge.leftVertex.pos,o,e),n=g(r.rightEdge.rightVertex.pos,o,e);return this._processCandidateProposal(p,n,i,e,t),t}_processCandidateProposal(i,e,t,r,s){var f;if(!this.exceedsShortLineThreshold(i,e,r))return;const o=he(U,m(i),m(e),.5),p=.5*A(m(i),m(e)),n=ie(U,m(t),o,p),h=C(I(n[0],n[1],t[2])),{spatialReference:a,pointer:l}=r,c=x(t,a,u,this.view);if(_(c,x(h,a,u,this.view))<this.squaredProximityThreshold(l)){if(this.isVertical(i,h,r)||this.isVertical(h,e,r))return;s.push(new me({targetPoint:h,point1:i,point2:e,isDraped:((f=r.elevationInfo)==null?void 0:f.mode)==="on-the-ground"}))}}};const U=N();let w=class extends K{constructor(d){super(d),this.updating=!1,this._snappers=new Q,this._domain=re.SELF}initialize(){this._snappers.push(new Ve(this.view,this.options),new xe(this.view,this.options,this.geodesicLengthMeasurementUtils),new ye(this.view,this.options,this.geodesicLengthMeasurementUtils),new Te(this.view,this.options))}set options(d){this._set("options",d);for(const i of this._snappers)i.options=d}async fetchCandidates(d,i,e){if(!(i&this._domain&&this.options.effectiveSelfEnabled))return[];const t=[];for(const r of this._snappers.items)for(const s of r.snap(d,e))t.push(s);return se(d,t),t}};L([T({readOnly:!0})],w.prototype,"updating",void 0),L([T({constructOnly:!0})],w.prototype,"view",void 0),L([T({constructOnly:!0})],w.prototype,"geodesicLengthMeasurementUtils",void 0),L([T()],w.prototype,"options",null),w=L([W("esri.views.interactive.snapping.SelfSnappingEngine")],w);export{w as SelfSnappingEngine};
