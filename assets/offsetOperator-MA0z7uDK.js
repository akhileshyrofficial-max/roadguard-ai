import{cJ as c,L as x}from"./Identifiable-B58w9FD1.js";import{w as d,j as y}from"./operatorOffset-BM5UW64D.js";import{getSpatialReference as f,fromGeometry as G,toGeometry as u,fromGeometries as g}from"./jsonConverter-RQ4yjUwR.js";import"./index-VFfT8Aji.js";import"./SimpleGeometryCursor-B92kdZ15.js";import"./ProjectionTransformation-BD4yTSAC.js";import"./Envelope2D-Cq0k1qIA.js";import"./Point2D-CvBsPtPg.js";import"./Transformation2D-BcN_JJet.js";import"./OperatorDefinitions-DP7_WWTp.js";const l={round:0,bevel:1,miter:2,square:3};function I(e,t,n={}){const{miterLimit:a=10,flattenError:p=0,joins:s="round",unit:r}=n,o=f(e);r&&o&&(t=c(t,r,o));const m=G(e),i=m.getSpatialReference();return u(d(m.getGeometry(),i,t,l[s],a,p),i)}function J(e,t,n={}){const{miterLimit:a=10,flattenError:p=0,joins:s="round",unit:r}=n,o=f(e);r&&o&&(t=c(t,r,o));const[m,i]=g(e);return y(m,i,t,l[s],a,p).map(j=>u(j,i)).filter(x)}export{I as execute,J as executeMany};
