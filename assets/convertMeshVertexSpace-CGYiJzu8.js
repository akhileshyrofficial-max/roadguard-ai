import{aw as m,s,n as p}from"./Identifiable-_3rFZ1o6.js";import{p as n}from"./MeshVertexAttributes-C-z5VO3K.js";import{B as a}from"./vertexSpaceConversion-zzk3KXPr.js";import"./index-BEHHhRxI.js";import"./meshProperties-B4vupnXI.js";import"./mat3-CruJiiUv.js";import"./common-DQOJ18NT.js";import"./mat3f64-B5o_lm6j.js";import"./mat4-CEszlm-2.js";import"./mat4f64-q_b6UJoq.js";import"./vec32-soPbwaVZ.js";import"./spatialReferenceEllipsoidUtils-DTRGV_GU.js";import"./computeTranslationToOriginAndRotation-BC1si6zj.js";import"./projectionUtils-BdqPecQc.js";import"./projectPointToVector-BeChI4_x.js";import"./meshVertexSpaceUtils-BPkMPmro.js";import"./MeshLocalVertexSpace-DhAtAXfe.js";import"./vec3-BskQ-MRq.js";import"./BufferView-eGDukKmQ.js";import"./vec2-ChnYg_BJ.js";import"./vec42-CKs01hkn.js";import"./vec2f64-Cgb6qxNH.js";import"./vec4f64-DPb6J-GU.js";import"./vec4-D2P2fOM6.js";async function q(t,o,r){await Promise.resolve(),m(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{q as convertMeshVertexSpace};
