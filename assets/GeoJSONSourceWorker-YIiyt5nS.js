import{bW as I,s as E,aK as A,b as D,i as Q,a as Z,H as N}from"./Identifiable-_3rFZ1o6.js";import{d as P}from"./asyncUtils-CmphLL3n.js";import{v as R}from"./jsonUtils-Cc67rW5Z.js";import{u as G,l as M,r as B,s as z,o as L}from"./featureConversionUtils-scwmf_ir.js";import{u as W}from"./executeQueryForSnapping-B70GSxOt.js";import{f as H}from"./FeatureStore-DwLYiBQY.js";import{x as b,j as w}from"./queryUtils-Cag0ceeo.js";import{L as J}from"./QueryEngine-ZiVgiJec.js";import{I as U,N as V,E as K}from"./geojson-D98aUo3Z.js";import{l as Y,a as X,u as ee}from"./clientSideDefaults-C0afugGq.js";import{S as te,E as ie,d as T,f as j,p as F,h as $}from"./sourceUtils-DExfbA9U.js";import{Z as O}from"./FieldsIndex-BTwzr3dJ.js";import{i as se}from"./fieldType-Pks4G8In.js";import{e as re,n as ne}from"./fieldUtils-z3GG2R-H.js";import"./index-BEHHhRxI.js";import"./aaBoundingBox-DNlIzH5i.js";import"./OptimizedFeature-C57xHwXW.js";import"./memoryEstimations-BG_NSMOj.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./createFeatureId-BiB9j2WD.js";import"./normalizeUtils-BS0bJnzn.js";import"./normalizeUtilsCommon-Ca72SEzL.js";import"./utils-C73sopP7.js";import"./utils-UVgDzRJn.js";import"./timeSupport-Btk7Sbvt.js";import"./BoundsStore-Bh6_x4Ps.js";import"./PooledRBush-2eGRraPp.js";import"./quickselect-QQC62dOK.js";import"./optimizedFeatureQueryEngineAdapter-AkYOo5Gh.js";import"./projectionUtils-BdqPecQc.js";import"./json-Wa8cmqdu.js";import"./WhereClauseCache-bgzfZccG.js";import"./LRUCache-eBEVKbNU.js";import"./MemCache-CUhFgUMJ.js";import"./WhereClause-GH2HPADl.js";import"./TimeOnly-YXxQ25V6.js";import"./enum-DaKdEk_o.js";import"./UnknownTimeZone-CpPKXuRf.js";import"./QueryEngineCapabilities-CsRUnGk7.js";import"./quantizationUtils-C8uJ5ebt.js";import"./utils-CvTVbJNb.js";import"./screenUtils-aQeO9QTD.js";import"./Layer--GugXUPW.js";import"./heatmapUtils-D0hGWZT9.js";import"./vec42-CKs01hkn.js";import"./common-DQOJ18NT.js";import"./vec4f64-DPb6J-GU.js";import"./utils-XTVqdLXj.js";import"./mat4f32-Djp3mnm5.js";import"./mat4-CEszlm-2.js";import"./number-7p_O6jwX.js";import"./timeZoneUtils-Cef7SfoB.js";import"./utils-DbQdGEX2.js";import"./ClassBreaksDefinition-BJIhW5Q8.js";import"./SnappingCandidate-DGkpYqI6.js";import"./FixedIntervalBinParameters-CqHG-zwl.js";import"./NormalizationBinParametersMixin-DdJue4AE.js";import"./Scheduler-DH2YvKGe.js";import"./signal-R7pX2aet.js";import"./date-Ctp1FiBW.js";import"./defaultsJSON-GKolV7NZ.js";const ae={hasAttachments:!1,capabilities:"query, editing, create, delete, update",useStandardizedQueries:!0,supportsCoordinatesQuantization:!0,supportsReturningQueryGeometry:!0,advancedQueryCapabilities:{supportsQueryAttachments:!1,supportsQueryAttachmentOrderByFields:!1,supportsQueryBins:!0,supportsQueryWithCacheHint:!0,supportsQueryWithDistance:!0,supportsQueryWithResultType:!0,supportsStatistics:!0,supportsPercentileStatistics:!0,supportsReturningGeometryCentroid:!0,supportsDistinct:!0,supportsReturningQueryExtent:!0,supportsReturningGeometryProperties:!1,supportsHavingClause:!0,supportsOrderBy:!0,supportsPagination:!0,supportsSqlExpression:!0,supportsDisjointSpatialRel:!0},queryBinsCapabilities:te};class ht{constructor(){this._queryEngine=null,this._snapshotFeatures=async e=>{const t=await this._fetch(e);return this._createFeatures(t)}}destroy(){var e;(e=this._queryEngine)==null||e.destroy(),this._queryEngine=this._createDefaultAttributes=null}async load(e,t={}){this._loadOptions={url:e.url,customParameters:e.customParameters};const r=[],[i]=await Promise.all([e.url?this._fetch(t==null?void 0:t.signal):null,this._checkProjection(e.spatialReference)]),s=U(i,{geometryType:e.geometryType}),o=e.fields||s.fields||[],l=e.hasZ!=null?e.hasZ:s.hasZ,p=s.geometryType;let y=e.objectIdField||s.objectIdFieldName||"__OBJECTID";const f=e.spatialReference||I;let u=e.timeInfo;o===s.fields&&s.unknownFields.length>0&&r.push({name:"geojson-layer:unknown-field-types",message:"Some fields types couldn't be inferred from the features and were dropped",details:{unknownFields:s.unknownFields}});const d=new O(o);let n=d.get(y);n?(n.type!=="esriFieldTypeString"&&(n.type="esriFieldTypeOID"),n.editable=!1,n.nullable=!1,y=n.name):(n={alias:y,name:y,type:s.objectIdFieldType==="string"?"esriFieldTypeString":"esriFieldTypeOID",editable:!1,nullable:!1},o.unshift(n));const m={};for(const a of o){if(a.name==null&&(a.name=a.alias),a.alias==null&&(a.alias=a.name),!a.name)throw new E("geojson-layer:invalid-field-name","field name is missing",{field:a});if(!se.jsonValues.includes(a.type))throw new E("geojson-layer:invalid-field-type",`invalid type for field "${a.name}"`,{field:a});if(a.name!==n.name){const _=re(a);_!==void 0&&(m[a.name]=_)}a.length==null&&(a.length=ne(a))}if(u){if(u.startTimeField){const a=d.get(u.startTimeField);a?(u.startTimeField=a.name,a.type="esriFieldTypeDate"):u.startTimeField=null}if(u.endTimeField){const a=d.get(u.endTimeField);a?(u.endTimeField=a.name,a.type="esriFieldTypeDate"):u.endTimeField=null}if(u.trackIdField){const a=d.get(u.trackIdField);a?u.trackIdField=a.name:(u.trackIdField=null,r.push({name:"geojson-layer:invalid-timeInfo-trackIdField",message:"trackIdField is missing",details:{timeInfo:u}}))}u.startTimeField||u.endTimeField||(r.push({name:"geojson-layer:invalid-timeInfo",message:"startTimeField and endTimeField are missing",details:{timeInfo:u}}),u=null)}const h=p?ee(p):void 0,c=d.dateFields.length?{timeZoneIANA:A}:null,g={warnings:r,featureErrors:[],layerDefinition:{...ae,drawingInfo:h??void 0,templates:Y(m),extent:void 0,geometryType:p,objectIdField:y,fields:o,hasZ:!!l,timeInfo:u,dateFieldsTimeReference:c}},C={type:"object-id",fieldName:y};this._queryEngine=new J({fieldsIndex:O.fromLayerJSON({fields:o,timeInfo:u,dateFieldsTimeReference:c}),geometryType:p,hasM:!1,hasZ:l,featureIdInfo:C,spatialReference:f,timeInfo:u,featureStore:new H({geometryType:p,hasM:!1,hasZ:l})});const q=this._queryEngine.fieldsIndex.requiredFields.indexOf(n);q>-1&&this._queryEngine.fieldsIndex.requiredFields.splice(q,1),this._createDefaultAttributes=X(m,y);const x=await this._createFeatures(i);this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,x);const k=this._normalizeFeatures(x,g.featureErrors);this._queryEngine.featureStore.addMany(k);const{fullExtent:v,timeExtent:S}=await this._queryEngine.fetchRecomputedExtents();if(g.layerDefinition.extent=v,S){const{start:a,end:_}=S;g.layerDefinition.timeInfo.timeExtent=[a,_]}return g}async applyEdits(e){const{spatialReference:t,geometryType:r}=this._queryEngine;return await Promise.all([ie(t,r),b(e.adds,t),b(e.updates,t)]),await this._waitSnapshotComplete(),this._applyEdits(e)}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),W(this._queryEngine,e,t.signal)}async queryAttributeBins(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeAttributeBinsQuery(e,t.signal)}async refresh(e){var i;this._loadOptions.customParameters=e,(i=this._snapshotTask)==null||i.abort(),this._snapshotTask=P(this._snapshotFeatures),this._snapshotTask.promise.then(s=>{this._queryEngine.featureStore.clear(),this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,s);const o=this._normalizeFeatures(s);o&&this._queryEngine.featureStore.addMany(o)},s=>{this._queryEngine.featureStore.clear(),D(s)||Q.getLogger("esri.layers.GeoJSONLayer").error(new E("geojson-layer:refresh","An error occurred during refresh",{error:s}))}),await this._waitSnapshotComplete();const{fullExtent:t,timeExtent:r}=await this._queryEngine.fetchRecomputedExtents();return{extent:t,timeExtent:r}}async _createFeatures(e){if(e==null)return[];const{geometryType:t,hasZ:r,objectIdField:i}=this._queryEngine,s=V(e,{geometryType:t,hasZ:r,objectIdField:i});if(!Z(this._queryEngine.spatialReference,I))for(const o of s)o.geometry!=null&&(o.geometry=G(w(M(o.geometry,this._queryEngine.geometryType,this._queryEngine.hasZ,!1),I,this._queryEngine.spatialReference)));return s}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _fetch(e){const{url:t,customParameters:r}=this._loadOptions,i=(await N(t??"",{responseType:"json",query:{...r},signal:e})).data;return K(i),i}_normalizeFeatures(e,t){const{objectIdField:r,fieldsIndex:i}=this._queryEngine,s=[];for(const o of e){const l=this._createDefaultAttributes(),p=T(i,l,o.attributes,!0);p?t==null||t.push(p):(this._assignObjectId(l,o.attributes,!0),o.attributes=l,o.objectId=l[r],s.push(o))}return s}async _applyEdits(e){const{adds:t,updates:r,deletes:i}=e,s={addResults:[],deleteResults:[],updateResults:[],uidToObjectId:{}};if(t!=null&&t.length&&this._applyAddEdits(s,t),r!=null&&r.length&&this._applyUpdateEdits(s,r),i==null?void 0:i.length){for(const p of i)s.deleteResults.push(j(p));this._queryEngine.featureStore.removeManyById(i)}const{fullExtent:o,timeExtent:l}=await this._queryEngine.fetchRecomputedExtents();return{extent:o,timeExtent:l,featureEditResults:s}}_applyAddEdits(e,t){const{addResults:r}=e,{geometryType:i,hasM:s,hasZ:o,objectIdField:l,spatialReference:p,featureStore:y,fieldsIndex:f}=this._queryEngine,u=[],d={type:"object-id",fieldName:l};for(const n of t){if(n.geometry&&i!==R(n.geometry)){r.push(F("Incorrect geometry type."));continue}const m=this._createDefaultAttributes(),h=T(f,m,n.attributes);if(h)r.push(h);else{if(this._assignObjectId(m,n.attributes),n.attributes=m,n.uid!=null){const c=n.attributes[l];e.uidToObjectId[n.uid]=c}if(n.geometry!=null){const c=n.geometry.spatialReference??p;n.geometry=w($(n.geometry,c),c,p)}u.push(n),r.push(j(n.attributes[l]))}}y.addMany(B([],u,i,o,s,d))}_applyUpdateEdits({updateResults:e},t){const{geometryType:r,hasM:i,hasZ:s,objectIdField:o,spatialReference:l,featureStore:p,fieldsIndex:y}=this._queryEngine,f={type:"object-id",fieldName:o};for(const u of t){const{attributes:d,geometry:n}=u,m=d==null?void 0:d[o];if(m==null){e.push(F(`Identifier field ${o} missing`));continue}if(!p.has(m)){e.push(F(`Feature with object id ${m} missing`));continue}const h=z(p.getFeature(m),r,s,i);if(n!=null){if(r!==R(n)){e.push(F("Incorrect geometry type."));continue}const c=n.spatialReference??l;h.geometry=w($(n,c),c,l)}if(d){const c=T(y,h.attributes,d);if(c){e.push(c);continue}}p.add(L(h,r,s,i,f)),e.push(j(m))}}_createObjectIdGenerator(e,t){const r=e.fieldsIndex.get(e.objectIdField);if(r.type==="esriFieldTypeString")return()=>r.name+"-"+Date.now().toString(16);let i=Number.NEGATIVE_INFINITY;for(const s of t)s.objectId&&(i=Math.max(i,s.objectId));return i=Math.max(0,i)+1,()=>i++}_assignObjectId(e,t,r=!1){const i=this._queryEngine.objectIdField;e[i]=r&&i in t?t[i]:this._objectIdGenerator()}async _checkProjection(e){try{await b(I,e)}catch{throw new E("geojson-layer","Projection not supported")}}}export{ht as default};
