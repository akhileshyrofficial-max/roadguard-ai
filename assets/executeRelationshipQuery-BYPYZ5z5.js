import{f as u}from"./utils-DM3VuI_N.js";import{H as f,ct as y}from"./Identifiable-B58w9FD1.js";import{t as j}from"./query-DlUKcN7V.js";import{g as R}from"./FeatureSet-DrLo5FjM.js";import{c as d}from"./labelingInfo-D218ARvW.js";import"./index-VFfT8Aji.js";import"./jsonUtils-rvWrjUVI.js";import"./normalizeUtils-DiYDtdl8.js";import"./normalizeUtilsCommon-BcGwSELE.js";import"./utils-Kw6dbpdX.js";import"./pbfQueryUtils-H9tI0GDN.js";import"./pbf-6MtXQ4A6.js";import"./memoryEstimations-ugfznLe2.js";import"./OptimizedFeature-DFf7-Rrh.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./queryZScale-CxgQnwhw.js";import"./projectionUtils-DsK_8mH5.js";import"./Graphic-sBrqQAPW.js";import"./PopupTemplate-D_WeQBNh.js";import"./fieldUtils-5LubkA3t.js";import"./typeUtils-BD6Rtzmx.js";import"./createFeatureId-BiB9j2WD.js";import"./typeUtils-Du36Z1Jr.js";import"./SimpleMarkerSymbol-B18xir4G.js";import"./screenUtils-aQeO9QTD.js";import"./aaBoundingBox-CGMzNzJN.js";import"./TextSymbol-C7i9ol-5.js";import"./PictureMarkerSymbol-D6pzvUP4.js";import"./Field-BoWr0HZE.js";import"./fieldType-CgljAswg.js";import"./asyncUtils-C5b0g4Vr.js";import"./uuid-Cl5lrJ4c.js";import"./Query-B1Zd9wiX.js";import"./Layer-C63inyUN.js";import"./layerUtils-CAMu1s-2.js";import"./SimpleRenderer-Cedg0Xn2.js";import"./commonProperties-CL8iWgtU.js";import"./colorRamps-BwV5NB8A.js";import"./ColorStop-DBTLRnqQ.js";import"./visualVariableUtils-CiMe3o6k.js";import"./lengthUtils-DEvA7X52.js";import"./jsonUtils-BhRkbivh.js";import"./defaults3D-DzIVO-Cs.js";import"./defaults-CXADZSqg.js";import"./defaultsJSON-GKolV7NZ.js";import"./UniqueValueRenderer-C3cUyoso.js";import"./diffUtils-jeIEfUBl.js";import"./RendererLegendOptions-Bp93r_aZ.js";import"./styleUtils-CnCv1b7N.js";import"./NormalizationBinParametersMixin-2d45MFq8.js";import"./labelUtils-XzqWkuAo.js";function h(e,o){const t=e.toJSON();return t.objectIds&&(t.objectIds=t.objectIds.join(",")),t.orderByFields&&(t.orderByFields=t.orderByFields.join(",")),t.outFields&&!(o!=null&&o.returnCountOnly)?t.outFields.includes("*")?t.outFields="*":t.outFields=t.outFields.join(","):delete t.outFields,t.outSR&&(t.outSR=y(t.outSR)),t.dynamicDataSource&&(t.layer=JSON.stringify({source:t.dynamicDataSource}),delete t.dynamicDataSource),t}async function F(e,o,t){const i=await l(e,o,t),r=i.data,n=r.geometryType,m=r.spatialReference,p={};for(const s of r.relatedRecordGroups){const a={fields:void 0,geometryType:n,spatialReference:m,hasZ:!!r.hasZ,hasM:!!r.hasM,features:s.relatedRecords};if(s.objectId!=null)p[s.objectId]=a;else for(const c of Object.keys(s))c!=="relatedRecords"&&(p[s[c]]=a)}return{...i,data:p}}async function b(e,o,t){const i=await l(e,o,t,{returnCountOnly:!0}),r=i.data,n={};for(const m of r.relatedRecordGroups)m.objectId!=null&&(n[m.objectId]=m.count);return{...i,data:n}}async function l(e,o,t={},i){const r=j({...e.query,f:"json",...i,...h(o,i)});return f(e.path+"/queryRelatedRecords",{...t,query:{...t.query,...r}})}async function ht(e,o,t){o=d.from(o);const i=u(e);return F(i,o,t).then(r=>{const n=r.data,m={};return Object.keys(n).forEach(p=>m[p]=R.fromJSON(n[p])),m})}async function Ft(e,o,t){o=d.from(o);const i=u(e);return b(i,o,{...t}).then(r=>r.data)}export{ht as executeRelationshipQuery,Ft as executeRelationshipQueryForCount};
