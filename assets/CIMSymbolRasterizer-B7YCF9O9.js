import{s as F,y as T}from"./jsonUtils-Cc67rW5Z.js";import{i as $}from"./CIMResourceManager-BmtmCbaH.js";import{a as G,h as j,u as q}from"./UpdateTracking2D-D5YHt5xb.js";import{v as A}from"./OverrideHelper-_hwADhTN.js";import{T as S,R as z}from"./rasterizingUtils-CdiTAUhT.js";import{z as D}from"./utils-DrbBeUzW.js";import"./Identifiable-_3rFZ1o6.js";import"./index-BEHHhRxI.js";import"./imageUtils-DN-q3Lg0.js";import"./BidiEngine-QXap_35O.js";import"./screenUtils-aQeO9QTD.js";import"./TextSymbol-keZwKiPd.js";import"./SimpleMarkerSymbol-Drowg4jp.js";import"./OptimizedFeature-C57xHwXW.js";import"./memoryEstimations-BG_NSMOj.js";import"./GeometryUtils-CiPYWcEQ.js";import"./enums-BPiq_WIC.js";import"./defaultCIMValues-BrbaHf9c.js";import"./definitions-CASyCajO.js";import"./enums-NCSMZWP1.js";import"./common-DQOJ18NT.js";import"./TileKey-upwcIO5W.js";import"./vec2-ChnYg_BJ.js";import"./Queue-CJjQn74K.js";import"./ReactiveMap-DptZZMoQ.js";import"./signal-R7pX2aet.js";import"./quickselect-QQC62dOK.js";import"./Query-Dp8boimB.js";import"./typeUtils-mxDsOnhk.js";import"./Field-Bopg3Spw.js";import"./fieldType-Pks4G8In.js";import"./Layer--GugXUPW.js";import"./vec2f32-CaVKkSa6.js";import"./Rect-CUzevAry.js";import"./Utils-BG5m93IY.js";import"./enums-UBzvFP7O.js";import"./getDataTypeBytes-D2DiHx_d.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./defaults-CSNv9gRz.js";import"./defaultsJSON-GKolV7NZ.js";import"./UpdatingHandles-BZb3Zh99.js";import"./colorUtils-DQQagumJ.js";import"./vec42-CKs01hkn.js";import"./vec4f64-DPb6J-GU.js";import"./FieldsIndex-BTwzr3dJ.js";import"./UnknownTimeZone-CpPKXuRf.js";import"./fieldUtils-z3GG2R-H.js";import"./timeZoneUtils-Cef7SfoB.js";import"./ArcadeExpression-u2IaIuRW.js";import"./TimeOnly-YXxQ25V6.js";import"./enum-DaKdEk_o.js";import"./quantizationUtils-C8uJ5ebt.js";import"./floatRGBA-xT4oRKt0.js";const B=96/72;class Lt{constructor(n){this._spatialReference=n,this._imageDataCanvas=null,this._cimResourceManager=new $}get _canvas(){return this._imageDataCanvas||(this._imageDataCanvas=document.createElement("canvas")),this._imageDataCanvas}get resourceManager(){return this._cimResourceManager}async rasterizeCIMSymbolAsync(n,m,a,R,I,h,l,p,g,x){if(!n)return null;const{data:d}=n;if(!d||d.type!=="CIMSymbolReference"||!d.symbol)return null;const{symbol:v}=d;h||(h=D(v));const s=await A.resolveSymbolOverrides(d,m,this._spatialReference,I,h,l,p),w=this._cimResourceManager,b=[];G.fetchResources(s,w,b),G.fetchFonts(s,w,b),b.length>0&&await Promise.all(b);const{width:e,height:r}=a;let c=E(h,e,r,R,x);const t=G.getEnvelope(s,c,w);if(!t)return null;t.x===1/0&&(t.x=e+2),t.y===1/0&&(t.y=-r/2),t.width===-1/0&&(t.width=e),t.height===-1/0&&(t.height=r);let y=1,_=0,C=0;switch(v.type){case"CIMPointSymbol":case"CIMTextSymbol":{let i=1;t.width>e&&(i=e/t.width);let o=1;t.height>r&&(o=r/t.height),R==="preview"&&(t.width<e&&(i=e/t.width),t.height<r&&(o=r/t.height)),y=Math.min(i,o),_=t.x+t.width/2,C=t.y+t.height/2}break;case"CIMLineSymbol":if(x){C=t.y+t.height/2,_=t.x+t.width/2;const i=t.width-e,o=t.height-r;c={paths:S(c.paths,{xmin:-1*t.width/2+i,xmax:t.width/2-i,ymin:-1*t.height/2+o,ymax:t.height/2-o,width:t.width-2*i,height:t.height-2*o})}}else{(g||t.height>r)&&(y=r/t.height),C=t.y+t.height/2;const i=t.x*y+e/2,o=(t.x+t.width)*y+e/2,M=F(c)?c.paths:T(c)?c.rings:null;if(M===null)throw new Error("Bad geometry, can't rasterise symbol!");M[0][0][0]-=i/y,M[0][2][0]-=(o-e)/y}break;case"CIMPolygonSymbol":if(x){C=t.y+t.height/2,_=t.x+t.width/2;const i=t.width-e,o=t.height-r;c={paths:S(c.rings,{xmin:-1*t.width/2+i,xmax:t.width/2-i,ymin:-1*t.height/2+o,ymax:t.height/2-o,width:t.width-2*i,height:t.height-2*o})}}else{_=t.x+t.width/2,C=t.y+t.height/2;const i=t.x*y+e/2,o=(t.x+t.width)*y+e/2,M=t.y*y+r/2,P=(t.y+t.height)*y+r/2,{rings:u}=c;i<0&&(u[0][0][0]-=i,u[0][3][0]-=i,u[0][4][0]-=i),M<0&&(u[0][0][1]+=M,u[0][1][1]+=M,u[0][4][1]+=M),o>e&&(u[0][1][0]-=o-e,u[0][2][0]-=o-e),P>r&&(u[0][2][1]+=P-r,u[0][3][1]+=P-r)}}const k={type:"cim",data:{type:"CIMSymbolReference",symbol:s}};return this.rasterize(k,e,r,_,C,y,h,1,c)}rasterize(n,m,a,R,I,h,l,p=0,g=null,x=window.devicePixelRatio||1){const{data:d}=n;if(!d||d.type!=="CIMSymbolReference"||!d.symbol)return null;const{symbol:v}=d,s=this._canvas,w=x*B;s.width=m*w,s.height=a*w,l||(l=D(v)),g||(g=E(l,m,a,"legend")),s.width+=2*p,s.height+=2*p;const b=s.getContext("2d",{willReadFrequently:!0}),e=j.createIdentity();return e.translate(-R,-I),e.scale(h*w,-h*w),e.translate(m*w/2+p,a*w/2+p),b.clearRect(0,0,s.width,s.height),new q(b,this._cimResourceManager,e,!0).drawSymbol(v,g),b.getImageData(0,0,s.width,s.height)}}function L(f,n,m,a){return n==="esriGeometryPolygon"?{rings:z(S(f.rings,{xmin:0,ymin:0,width:m,height:a}),-1*m/2,-1*a/2)}:n==="esriGeometryPolyline"?{paths:z(S(f.paths,{xmin:0,ymin:0,width:m,height:a}),-1*m/2,-1*a/2)}:null}function E(f,n,m,a,R){const h=-n/2+1,l=n/2-1,p=m/2-1,g=-m/2+1;if(R&&(f==="esriGeometryPolygon"||f==="esriGeometryPolyline")){const x=L(R,f,n,m);if(x)return x}switch(f){case"esriGeometryPoint":return{x:0,y:0};case"esriGeometryPolyline":return{paths:[[[h,0],[0,0],[l,0]]]};default:return a==="legend"?{rings:[[[h,p],[l,0],[l,g],[h,g],[h,p]]]}:{rings:[[[h,p],[l,p],[l,g],[h,g],[h,p]]]}}}export{Lt as CIMSymbolRasterizer};
