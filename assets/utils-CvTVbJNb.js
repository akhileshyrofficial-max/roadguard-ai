import{al as z,bH as C,b1 as O,a0 as R,s as U}from"./Identifiable-_3rFZ1o6.js";import{u as A}from"./screenUtils-aQeO9QTD.js";import{r as v}from"./Layer--GugXUPW.js";import{j as G}from"./quantizationUtils-C8uJ5ebt.js";import{T as Y,a as D}from"./fieldUtils-z3GG2R-H.js";import{u as S,l as V}from"./heatmapUtils-D0hGWZT9.js";import{$ as _}from"./utils-XTVqdLXj.js";import{m as E,B as L}from"./utils-DbQdGEX2.js";let c=null;const P=/^(?<hh>([0-1][0-9])|([2][0-3])):(?<mm>[0-5][0-9])(:(?<ss>[0-5][0-9]))?([.](?<ms>\d+))?$/;function k(e,t,n){return e.x<0?e.x+=t:e.x>n&&(e.x-=t),e}function re(e,t,n,r){const i=C(n)?O(n):null,s=i?Math.round((i.valid[1]-i.valid[0])/t.scale[0]):null;return e.map(a=>{const l=new R(a.geometry);return G(t,l,l),a.geometry=i?k(l,s??0,r[0]):l,a})}function ie(e,t=18,n,r,i){const s=new Float64Array(r*i);t=Math.round(A(t));let a=Number.POSITIVE_INFINITY,l=Number.NEGATIVE_INFINITY;const I=S(n);for(const{geometry:p,attributes:F}of e){const{x:g,y:f}=p,w=Math.max(0,g-t),N=Math.max(0,f-t),M=Math.min(i,f+t),x=Math.min(r,g+t),h=+I(F);for(let m=N;m<M;m++)for(let d=w;d<x;d++){const $=m*r+d,b=V(d-g,m-f,t)*h,u=s[$]+=b;a=Math.min(a,u),l=Math.max(l,u)}}return{min:a,max:l}}function q(e){const t=P.exec(e);if(!t)return null;const{hh:n,mm:r,ss:i,ms:s}=t.groups;return Number(n)*v.hours+Number(r)*v.minutes+Number(i)*v.seconds+Number(s||0)}async function oe(e,t,n=!0){if(!t)return[];const{field:r,field2:i,field3:s,fieldDelimiter:a,fieldInfos:l,timeZone:I}=e,p=r&&(l==null?void 0:l.find(u=>u.name.toLowerCase()===r.toLowerCase())),F=!!p&&Y(p),g=!!p&&_(p),f=e.valueExpression,w=e.normalizationType,N=e.normalizationField,M=e.normalizationTotal,x=[],h=e.viewInfoParams;let m=null,d=null;if(f){if(!c){const{arcadeUtils:u}=await D();c=u}c.hasGeometryOperations(f)&&await c.enableGeometryOperations(),m=c.createFunction(f),d=h?c.getViewInfo({viewingMode:h.viewingMode,scale:h.scale,spatialReference:new z(h.spatialReference)}):null}const $=e.fieldInfos,b=!(t[0]&&"declaredClass"in t[0]&&t[0].declaredClass==="esri.Graphic")&&$?{fields:$}:null;return t.forEach(u=>{const y=u.attributes;let o;if(f){const T=b?{...u,layer:b}:u,j=c.createExecContext(T,d,I);o=c.executeFunction(m,j)}else y&&(o=y[r],i?(o=`${E(o)}${a}${E(y[i])}`,s&&(o=`${o}${a}${E(y[s])}`)):typeof o=="string"&&n&&(g?o=o?new Date(o).getTime():null:F&&(o=o?q(o):null)));if(w&&typeof o=="number"&&isFinite(o)){const T=y&&parseFloat(y[N]);o=L(o,w,T,M)}x.push(o)}),x}function se(e){const t=e.field,n=e.normalizationType,r=e.normalizationField;let i;return n==="field"?i="(NOT "+r+" = 0)":n!=="log"&&n!=="natural-log"&&n!=="square-root"||(i=`(${t} > 0)`),i}function le(e,t,n){const r=t!=null?e+" >= "+t:"",i=n!=null?e+" <= "+n:"";let s="";return s=r&&i?B(r,i):r||i,s?"("+s+")":""}function B(e,t){let n=e??"";return t!=null&&t&&(n=n?"("+n+") AND ("+t+")":t),n}function ae(e,t){if(e&&e.spatialRelationship!=="intersects")return new U(t,"Only 'intersects' spatialRelationship is supported for featureFilter")}function ue(e,t,n){const r=H({layer:e,fields:t});if(r.length)return new U(n,"Unknown fields: "+r.join(", ")+". You can only use fields defined in the layer schema");const i=Z({layer:e,fields:t});return i.length?new U(n,"Unsupported fields: "+i.join(", ")+". You can only use fields that can be fetched i.e. AdapterFieldUsageInfo.supportsStatistics must be true"):void 0}function H(e){const t=e.layer;return e.fields.filter(n=>!t.getField(n))}function Z(e){const t=e.layer;return e.fields.filter(n=>{const r=t.getFieldUsageInfo(n);return!r||!r.supportsStatistics})}export{se as F,q as I,ae as M,le as N,ue as T,B as U,oe as b,ie as w,re as x};
