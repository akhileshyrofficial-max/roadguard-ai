import{f as u}from"./utils-C73sopP7.js";import{H as f,ct as y}from"./Identifiable-_3rFZ1o6.js";import{t as j}from"./query-BK4ukVuP.js";import{g as R}from"./FeatureSet-CZLo56w_.js";import{c as d}from"./labelingInfo-CkSgsIBo.js";import"./index-BEHHhRxI.js";import"./jsonUtils-Cc67rW5Z.js";import"./normalizeUtils-BS0bJnzn.js";import"./normalizeUtilsCommon-Ca72SEzL.js";import"./utils-UVgDzRJn.js";import"./pbfQueryUtils-G12Ca3sG.js";import"./pbf-CS5_6Vtc.js";import"./memoryEstimations-BG_NSMOj.js";import"./OptimizedFeature-C57xHwXW.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./queryZScale-yLGROW-s.js";import"./projectionUtils-BdqPecQc.js";import"./Graphic-q_7OAYHf.js";import"./PopupTemplate-B09IYibB.js";import"./fieldUtils-z3GG2R-H.js";import"./typeUtils-mxDsOnhk.js";import"./createFeatureId-BiB9j2WD.js";import"./typeUtils-Buir9u-w.js";import"./SimpleMarkerSymbol-Drowg4jp.js";import"./screenUtils-aQeO9QTD.js";import"./aaBoundingBox-DNlIzH5i.js";import"./TextSymbol-keZwKiPd.js";import"./PictureMarkerSymbol-DlgeV3xL.js";import"./Field-Bopg3Spw.js";import"./fieldType-Pks4G8In.js";import"./asyncUtils-CmphLL3n.js";import"./uuid-Cl5lrJ4c.js";import"./Query-Dp8boimB.js";import"./Layer--GugXUPW.js";import"./layerUtils-CFmFO8Du.js";import"./SimpleRenderer-Fz8G_PFF.js";import"./commonProperties-CEA2GgpB.js";import"./colorRamps-BmQEv1lz.js";import"./ColorStop-DY3WB4ha.js";import"./visualVariableUtils-DciVTowe.js";import"./lengthUtils-CrwfL9_h.js";import"./jsonUtils-MHL9p1Rq.js";import"./defaults3D-CE2uGgSa.js";import"./defaults-CSNv9gRz.js";import"./defaultsJSON-GKolV7NZ.js";import"./UniqueValueRenderer-CBLY0uWW.js";import"./diffUtils-C5CsICXC.js";import"./RendererLegendOptions-DWy2dLCX.js";import"./styleUtils-D7bnZHs6.js";import"./NormalizationBinParametersMixin-DdJue4AE.js";import"./labelUtils-BoctouOq.js";function h(e,o){const t=e.toJSON();return t.objectIds&&(t.objectIds=t.objectIds.join(",")),t.orderByFields&&(t.orderByFields=t.orderByFields.join(",")),t.outFields&&!(o!=null&&o.returnCountOnly)?t.outFields.includes("*")?t.outFields="*":t.outFields=t.outFields.join(","):delete t.outFields,t.outSR&&(t.outSR=y(t.outSR)),t.dynamicDataSource&&(t.layer=JSON.stringify({source:t.dynamicDataSource}),delete t.dynamicDataSource),t}async function F(e,o,t){const i=await l(e,o,t),r=i.data,n=r.geometryType,m=r.spatialReference,p={};for(const s of r.relatedRecordGroups){const a={fields:void 0,geometryType:n,spatialReference:m,hasZ:!!r.hasZ,hasM:!!r.hasM,features:s.relatedRecords};if(s.objectId!=null)p[s.objectId]=a;else for(const c of Object.keys(s))c!=="relatedRecords"&&(p[s[c]]=a)}return{...i,data:p}}async function b(e,o,t){const i=await l(e,o,t,{returnCountOnly:!0}),r=i.data,n={};for(const m of r.relatedRecordGroups)m.objectId!=null&&(n[m.objectId]=m.count);return{...i,data:n}}async function l(e,o,t={},i){const r=j({...e.query,f:"json",...i,...h(o,i)});return f(e.path+"/queryRelatedRecords",{...t,query:{...t.query,...r}})}async function ht(e,o,t){o=d.from(o);const i=u(e);return F(i,o,t).then(r=>{const n=r.data,m={};return Object.keys(n).forEach(p=>m[p]=R.fromJSON(n[p])),m})}async function Ft(e,o,t){o=d.from(o);const i=u(e);return b(i,o,{...t}).then(r=>r.data)}export{ht as executeRelationshipQuery,Ft as executeRelationshipQueryForCount};
