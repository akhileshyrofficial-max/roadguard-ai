import{x,bJ as w,l as D,U as G,v as z,c as n,m as r,d as M}from"./Identifiable-BjM0PfdN.js";import{u as y,g as f,f as I}from"./screenUtils-aQeO9QTD.js";import{b as _}from"./vec2-ChnYg_BJ.js";import{p as H}from"./vec32-rHWgUfNj.js";import{L,O}from"./projectionUtils-D3_kHwH-.js";import{i as E}from"./projectPointToVector-yyeyeVyg.js";import{l as k}from"./elevationInfoUtils-BM_SdJ-M.js";import{J as R}from"./defaults-DZVYugxa.js";import{c as X}from"./ElevationInfo-B2ksLwBj.js";import{i as Y}from"./drapedUtils-DZzMmPre.js";function J(e){let l=0,i=0,t=0;return e?(e.type==="cim"&&e.data.symbol&&"symbolLayers"in e.data.symbol&&e.data.symbol.symbolLayers&&e.data.symbol.symbolLayers.map(s=>{s.type==="CIMVectorMarker"&&s.anchorPoint&&(Math.abs(s.anchorPoint.x)>l&&(l=s.anchorPoint.x),Math.abs(s.anchorPoint.y)>i&&(i=s.anchorPoint.y),s.size!=null&&s.size>t&&(t=s.size))}),l=y(l),i=y(i),t=y(t),{offsetX:l,offsetY:i,size:t}):{offsetX:l,offsetY:i,size:t}}let o=class extends x{set graphic(e){this._circleCollisionCache=null,this._originalSymbol=e.symbol,this._set("graphic",e),this.attachSymbolChanged()}get elevationInfo(){const{layer:e}=this.graphic,l=e&&"elevationInfo"in e?e.elevationInfo:null,i=k(this.graphic),t=l?l.offset:0;return new X({mode:i,offset:t})}set focusedSymbol(e){e!==this._get("focusedSymbol")&&(this._set("focusedSymbol",e),this._updateGraphicSymbol(),this._circleCollisionCache=null)}grabbableForEvent(){return!0}set grabbing(e){e!==this._get("grabbing")&&(this._set("grabbing",e),this._updateGraphicSymbol())}set hovering(e){e!==this._get("hovering")&&(this._set("hovering",e),this._updateGraphicSymbol())}set selected(e){e!==this._get("selected")&&(this._set("selected",e),this._updateGraphicSymbol(),this.events.emit("select-changed",{action:e?"select":"deselect"}))}get _focused(){return this._get("hovering")||this._get("grabbing")}constructor(e){super(e),this.layer=null,this.interactive=!0,this.selectable=!1,this.grabbable=!0,this.dragging=!1,this.cursor=null,this.consumesClicks=!0,this.events=new w.EventEmitter,this._circleCollisionCache=null,this._graphicSymbolChangedHandle=null,this._originalSymbol=null}destroy(){this.detachSymbolChanged(),this._resetGraphicSymbol(),this._set("view",null)}intersectionDistance(e){const l=this.graphic;if(l.visible===!1)return null;const i=l.geometry;if(i==null)return null;const t=this._get("focusedSymbol"),s=t??l.symbol;return this.view.type==="2d"?this._intersectDistance2D(this.view,e,i,s):this._intersectDistance3D(this.view,e,l)}attach(){this.attachSymbolChanged(),this.layer!=null&&this.layer.add(this.graphic)}detach(){this.detachSymbolChanged(),this._resetGraphicSymbol(),this.layer!=null&&this.layer.remove(this.graphic)}attachSymbolChanged(){this.detachSymbolChanged(),this._graphicSymbolChangedHandle=D(()=>{var e;return(e=this.graphic)==null?void 0:e.symbol},e=>{e!=null&&e!==this.focusedSymbol&&e!==this._originalSymbol&&(this._originalSymbol=e,this._focused&&this.focusedSymbol!=null&&(this.graphic.symbol=this.focusedSymbol))},G)}detachSymbolChanged(){this._graphicSymbolChangedHandle!=null&&(this._graphicSymbolChangedHandle.remove(),this._graphicSymbolChangedHandle=null)}onElevationChange(){}onViewChange(){}_updateGraphicSymbol(){this.graphic.symbol=this._focused&&this.focusedSymbol!=null?this.focusedSymbol:this._originalSymbol}_resetGraphicSymbol(){this.graphic.symbol=this._originalSymbol}_intersectDistance2D(e,l,i,t){var b,g;if((t=t||R(i))==null)return null;const s=1;let h=this._circleCollisionCache;if(i.type==="point"&&t.type==="cim"&&((b=t.data.symbol)==null?void 0:b.type)==="CIMPointSymbol"&&t.data.symbol.symbolLayers){const{offsetX:c,offsetY:a,size:u}=J(t),p=f(l,v),m=u/2,d=e.toScreen(i),C=d.x+c,P=d.y+a;return _(p,[C,P])<m*m?s:null}if(i.type!=="point"||t.type!=="simple-marker")return Y(l,i,e)?s:null;if(h==null||!h.originalPoint.equals(i)){const c=i,a=e.spatialReference;if(L(c.spatialReference,a)){const u=O(c,a);h={originalPoint:c.clone(),mapPoint:u,radiusPx:y(t.size)},this._circleCollisionCache=h}}if(h!=null){const c=f(l,v),a=(g=e.toScreen)==null?void 0:g.call(e,h.mapPoint);if(!a)return null;const u=h.radiusPx,p=a.x+y(t.xoffset),m=a.y-y(t.yoffset);return _(c,[p,m])<u*u?s:null}return null}_intersectDistance3D(e,l,i){const t=e.toMap(l,{include:[i]});return t&&E(t,S,e.renderSpatialReference)?H(S,e.state.camera.eye):null}};n([r({constructOnly:!0,nonNullable:!0})],o.prototype,"graphic",null),n([r()],o.prototype,"elevationInfo",null),n([r({constructOnly:!0,nonNullable:!0})],o.prototype,"view",void 0),n([r({value:null})],o.prototype,"focusedSymbol",null),n([r({constructOnly:!0})],o.prototype,"layer",void 0),n([r()],o.prototype,"interactive",void 0),n([r()],o.prototype,"selectable",void 0),n([r()],o.prototype,"grabbable",void 0),n([r({value:!1})],o.prototype,"grabbing",null),n([r()],o.prototype,"dragging",void 0),n([r()],o.prototype,"hovering",null),n([r({value:!1})],o.prototype,"selected",null),n([r()],o.prototype,"cursor",void 0),o=n([M("esri.views.interactive.GraphicManipulator")],o);const S=z(),v=I();export{o as S,J as s};
