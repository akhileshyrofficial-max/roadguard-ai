import{b5 as v,aN as W,b6 as A,e as X,ew as x,ex as D,Q as h,H as f,aw as l,bj as Y,du as Z,al as ee,E as se,dt as te,i as oe}from"./Identifiable-B58w9FD1.js";import{r as ne}from"./uuid-Cl5lrJ4c.js";import{f as re,b as ae,y as ie,i as E,n as _}from"./External-BSyveVKN.js";import{r as ce,n as le,t as ue,l as pe,c as I,a as me,b as fe,d as de,u as ge,p as he}from"./meshSpatialReferenceScaleUtils-wIWuQHaC.js";import{F as we,m as ye,a as Pe,u as be,s as Te}from"./infoFor3D-dHKPbXlj.js";import{i as ve,n as Ae}from"./meshFeatureAttributes-Ox5cJGYh.js";import"./index-VFfT8Aji.js";import"./MeshTransform-BB1siwsS.js";import"./mat4-CggL8WYf.js";import"./common-DQOJ18NT.js";import"./mat4f64-q_b6UJoq.js";import"./quat-6eAYSpU3.js";import"./mat3f64-B5o_lm6j.js";import"./quatf64-aQ5IuZRd.js";import"./vec32-BBi6eWk8.js";import"./vec42-CKs01hkn.js";import"./axisAngleDegrees-y-eEOVzV.js";const $={uploadAssetBlobs:{prepareAssetItems:.9,uploadAssetItems:.1},uploadConvertibleSource:{uploadEditSource:.5,serviceAssetsToGlb:.5},uploadLocalMesh:{meshToAssetBlob:.5,uploadAssetBlobs:.5}};function w(t,s=o=>{},e){return new $e(t,s,e)}let $e=class{constructor(s,e=n=>{},o){if(this.onProgress=e,this.taskName=o,this._progressMap=new Map,this._startTime=void 0,this._timingsMap=new Map,typeof s=="number"){this._weights={};for(let n=0;n<s;n++){const r=n,a=1/s;this._weights[r]=a,this._progressMap.set(r,0)}}else this._weights=s;this.emitProgress()}emitProgress(){let s=0;for(const[e,o]of this._progressMap.entries())s+=o*this._weights[e];if(s===1&&v("enable-feature:esri-3dofl-upload-timings")){const e=Math.round(performance.now()-(this._startTime??0))/1e3;console.log(`${this.taskName} done in ${e} sec`);for(const[o,n]of this._timingsMap){const r=Math.round(n.end-n.start)/1e3,a=Math.round(r/e*100);console.log(this.taskName??"Task",{stepKey:o,stepTime:r,relativeTime:a})}}this.onProgress(s)}setProgress(s,e){if(this._progressMap.set(s,e),v("enable-feature:esri-3dofl-upload-timings")){const o=performance.now();this._startTime??(this._startTime=o);const n=W(this._timingsMap,s,()=>({start:o,end:0}));e===1&&(n.end=o)}this.emitProgress()}simulate(s,e){return R(o=>this.setProgress(s,o),e)}makeOnProgress(s){return e=>this.setProgress(s,e)}};function R(t=e=>{},s=xe){const e=performance.now();t(0);const o=setInterval(()=>{const n=performance.now()-e,r=1-Math.exp(-n/s);t(r)},Se);return X(()=>{clearInterval(o),t(1)})}function je(t,s=Fe){return x(D(t*k/s))}function Me(t,s=Ne){return x(D(t*k/s))}const Fe=10,Ne=10,k=8e-6,Se=A(50),xe=A(1e3),C=1e6,S=20*C,De=2e9,Ee=3;async function _e({data:t,name:s,description:e},o,n){let r=null;try{const a=h(o,"uploads"),i=h(a,"info"),{data:u}=await f(i,{query:{f:"json"},responseType:"json"});l(n);const d=Y(o),g=u.maxUploadFileSize*C,m=d?De:g,c=d?Math.min(S,g):S;if(t.size>m)throw new Error("Data too large");const z=h(a,"register"),{data:j}=await f(z,{query:{f:"json",itemName:Ie(s),description:e},responseType:"json",method:"post"});if(l(n),!j.success)throw new Error("Registration failed");const{itemID:L}=j.item;r=h(a,L);const H=h(r,"uploadPart"),M=Math.ceil(t.size/c),y=new Array;for(let p=0;p<M;++p)y.push(t.slice(p*c,Math.min((p+1)*c,t.size)));const P=y.slice().reverse(),F=new Array,G=w(M,n==null?void 0:n.onProgress,"uploadItem"),J=async()=>{for(;P.length!==0;){const p=y.length-P.length,b=P.pop(),T=new FormData,Q=G.simulate(p,je(b.size));try{T.append("f","json"),T.append("file",b),T.append("partId",`${p}`);const{data:V}=await f(H,{timeout:0,body:T,responseType:"json",method:"post"});if(l(n),!V.success)throw new Error("Part upload failed")}finally{Q.remove()}}};for(let p=0;p<Ee&&P.length!==0;++p)F.push(J());await Promise.all(F);const K=h(r,"commit"),{data:N}=await f(K,{query:{f:"json",parts:y.map((p,b)=>b).join(",")},responseType:"json",method:"post"});if(l(n),!N.success)throw new Error("Commit failed");return N.item}catch(a){if(r!=null){const i=h(r,"delete");await f(i,{query:{f:"json"},responseType:"json",method:"post"})}throw a}}function Ie(t){return t.replaceAll("/","_").replaceAll("\\","_")}async function bs(t,s,e){var r;const o=t.length;if(!o)return(r=e==null?void 0:e.onProgress)==null||r.call(e,1),[];const n=w(o,e==null?void 0:e.onProgress,"uploadAssets");return Promise.all(t.map((a,i)=>Re(a,s,{...e,onProgress:n.makeOnProgress(i)})))}async function Re(t,{layer:s,ongoingUploads:e},o){var a;const n=e.get(t);if(n)return n;if(!Ze(s))throw new ce;if(ke(t,s))return(a=o==null?void 0:o.onProgress)==null||a.call(o,1),t;const r=Ce(t,s,o);e.set(t,r);try{await r}finally{e.delete(t)}return t}function ke(t,s){const{parsedUrl:e}=s;return e!=null&&t.metadata.externalSources.some(o=>re(o,e))}async function Ce(t,s,e){const{metadata:o}=t,{displaySource:n}=o,r=U(n==null?void 0:n.source,s,{checkForConversionRequired:v("enable-feature:georeferenced-uploads")}),a=r!=null?Ue(r,s,e):o.externalSources.length>0?Oe(t,s,e):qe(t,s,e),i=await a;return l(e),t.addExternalSources([i]),t}async function Ue(t,s,e){return{source:{type:"service",assets:await O(t,s,e)},original:!0,unitConversionDisabled:!0}}async function Oe(t,s,e){const o=B(s),{externalSources:n}=t.metadata,r=ze(n,s);if(!r)throw new le;const a=w($.uploadConvertibleSource,e==null?void 0:e.onProgress,"uploadConvertibleSource"),i={type:"service",assets:await O(r,s,{onProgress:a.makeOnProgress("uploadEditSource")})};t.addExternalSources([{source:i,original:!0}]);const u=r.reduce((g,{asset:m})=>m instanceof File?g+m.size:g,0),d=a.simulate("serviceAssetsToGlb",Me(u));try{const{source:g,transform:m,origin:c}=await Ve(i,s,o);return t.transform=m,c&&(t.metadata.georeferenced=!0,e!=null&&e.useAssetOrigin&&(t.vertexSpace.origin=[c.x,c.y,c.z??0],t.spatialReference=c.spatialReference)),{source:g,unitConversionDisabled:!0}}finally{d.remove()}}async function qe(t,s,e){const o=w($.uploadLocalMesh,e==null?void 0:e.onProgress,"uploadLocalMesh"),n=Be(t,s,{...e,onProgress:o.makeOnProgress("meshToAssetBlob")});return{source:{type:"service",assets:await q([n],s,{...e,onProgress:o.makeOnProgress("uploadAssetBlobs")})},extent:t.extent.clone(),original:!0}}async function Be(t,s,e){const o=B(s),n=await t.load(e),r=await n.toBinaryGLTF({origin:n.origin,signal:e==null?void 0:e.signal,ignoreLocalTransform:!0,unitConversionDisabled:!0});return l(e),{blob:new Blob([r],{type:"model/gltf-binary"}),assetName:`${ne()}.glb`,assetType:o}}function ze(t,s){for(const e of t){const o=U(e.source,s);if(o)return o}return null}function U(t,{infoFor3D:s},e={}){if(!t)return null;const o=ae(t);if(!o)return null;const{supportedFormats:n,editFormats:r}=s,a=new Array,i=we(s),u=ye(s);let d=!1;for(const g of o){const m=Le(g,n);if(!m)return null;const{assetType:c}=m;if(e.checkForConversionRequired&&(c===i||c===u))return null;r.includes(c)&&(d=!0),a.push(m)}return d?a:null}function Le(t,s){const e=ie(t,s);return e?{asset:t,assetType:e}:null}async function O(t,s,e){return q(t.map(o=>He(o,e)),s,e)}async function q(t,s,e){const o=w($.uploadAssetBlobs,e==null?void 0:e.onProgress,"uploadAssetBlobs"),n=await Je(t,s,{...e,onProgress:o.makeOnProgress("prepareAssetItems")});l(e);const r=n.map(({item:i})=>i),{uploadResults:a}=await Ke(r,s,{...e,onProgress:o.makeOnProgress("uploadAssetItems")});return l(e),t.map((i,u)=>Qe(n[u],a[u],s))}async function He(t,s){const{asset:e,assetType:o}=t;if(e instanceof File)return{blob:e,assetName:e.name,assetType:o};const n=await e.toBlob(s);return l(s),{blob:n,assetName:e.assetName,assetType:o}}async function Ge(t,s,e){const{blob:o,assetType:n,assetName:r}=t;let a=null;try{const i=await _e({data:o,name:r},s.url,e);l(e),a={assetType:n,assetUploadId:i.itemID}}catch(i){se(i),es().warnOnce(`Service ${s.url} does not support the REST Uploads API.`)}if(!a){const i=await te(o);if(l(e),!i.isBase64)throw new ge;a={assetType:n,assetData:i.data}}if(!a)throw new he;return{item:a,assetName:r}}function Je(t,s,e){const o=w(t.length,e==null?void 0:e.onProgress,"prepareAssetItems");return Promise.all(t.map(async(n,r)=>{const a=Ge(await n,s,{...e,onProgress:o.makeOnProgress(r)});return l(e),a}))}async function Ke(t,s,e){const o=R(e==null?void 0:e.onProgress);try{const n=await f(h(s.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(t)},method:"post",responseType:"json"});if(l(e),n.data.uploadResults.length!==t.length)throw new fe(t.length,n.data.uploadResults.length);return n.data}finally{o.remove()}}function Qe(t,s,e){const{success:o}=s;if(!o){const{error:d}=s;throw new de(t.assetName,d)}const{assetHash:n}=s,{assetName:r,item:{assetType:a}}=t,{infoFor3D:{supportedFormats:i}}=e,u=Te(a,i);if(!u)throw new I(a);return new E(r,u,[new _(`${e.parsedUrl.path}/assets/${n}`,n)])}async function Ve({assets:t},s,e){var r;const o=t.map(({assetName:a,parts:i})=>({assetName:a,assetHash:i[0].partHash}));let n;try{const a=h(s.parsedUrl.path,"convert3D"),i=(r=s.capabilities)==null?void 0:r.operations.supportsAsyncConvert3D;n=(await(i?Ye:Xe)(a,{query:{f:"json",assets:JSON.stringify(o),transportType:"esriTransportTypeUrl",targetFormat:e,async:i},responseType:"json",timeout:0})).data}catch{throw new pe}return We(s,n)}function We(t,s){const e={source:{type:"service",assets:s.assets.map(o=>{const n=be(o.contentType,t.infoFor3D.supportedFormats);if(!n)throw new I(n);return new E(o.assetName,o.contentType,[new _(o.assetURL,o.assetHash)])})},origin:void 0,transform:void 0};if(v("enable-feature:georeferenced-uploads")&&s.transform){if(e.transform=ve(s.transform),s.spatialReference){const o=ee.fromJSON(s.spatialReference);e.origin=Ae(s.transform,o)}}else e.transform=me(t.spatialReference);return e}function Xe(t,s){return f(t,s)}async function Ye(t,s){const e=(await f(t,s)).data.statusUrl;for(;;){const o=(await f(e,{query:{f:"json"},responseType:"json"})).data;switch(o.status){case"Completed":return f(o.resultUrl,{query:{f:"json"},responseType:"json"});case"CompletedWithErrors":throw new Error(o.status);case"Failed ImportChanges":case"InProgress":case"Pending":case"ExportAttachments":case"ExportChanges":case"ExportingData":case"ExportingSnapshot":case"ImportAttachments":case"ProvisioningReplica":case"UnRegisteringReplica":break;default:throw new Error}await Z(ss)}}function Ze(t){return!!t.infoFor3D&&!!t.url}function B({infoFor3D:t}){const s=Pe(t);if(!s)throw new ue;return s}function es(){return oe.getLogger("esri.layers.graphics.sources.support.uploadAssets")}const ss=A(1e3);export{bs as uploadAssets};
