import{b5 as l,bK as h,d5 as o}from"./Identifiable-BjM0PfdN.js";import{s as r,i as m,u as c}from"./memoryEstimations-m6Z1UQ7X.js";import{q as p,N as u}from"./aaBoundingBox-BrXqvn3i.js";import"./typeUtils-U-Zf11cK.js";import"./Field-FVkerAtx.js";function v(){return l("curve-densification-coarse-segments")}function f(){return l("curve-densification-max-segments")}function k(){return l("curve-densification-min-segments")}function z(){return l("curve-densification-pixel-deviation")}class I{constructor(s,n,e){this.uid=s,this.geometry=n,this.attributes=e,this.visible=!0,this.objectId=null,this.centroid=null}}function Z(t){return t.geometry!=null}class j{constructor(){this.exceededTransferLimit=!1,this.features=[],this.fields=[],this.hasM=!1,this.hasZ=!1,this.geometryType=null,this.objectIdFieldName=null,this.globalIdFieldName=null,this.geometryProperties=null,this.geohashFieldName=null,this.spatialReference=null,this.transform=null}}function w(t){if(t==null)return 0;switch(t.type){case"point":return r+10+8+24;case"polyline":case"polygon":{let s=0;const n=2+(t.hasZ?1:0)+(t.hasM?1:0),e=t.type==="polyline"?t.paths:t.rings,i=t.type==="polyline"?t.curvePaths:t.curveRings;if(i!=null&&i.length){const a=3*f()*128;s=8*a*n+128*a+32*(e.length+1)}else s=c(e);return r+64+s+34}case"multipoint":{const s=c(t.points);return r+s+64+34+32}case"extent":return r+10+64+34;case"mesh":{const s=t.vertexAttributes;return r+m(s.position,s.normal,s.uv,s.tangent)}default:return r}}function F(t,s){switch(p(s),t.type==="mesh"&&(t=t.extent),t.type){case"point":s[0]=s[3]=t.x,s[1]=s[4]=t.y,t.hasZ&&(s[2]=s[5]=t.z);break;case"polyline":for(let n=0;n<t.paths.length;n++)u(s,t.paths[n],!!t.hasZ);break;case"polygon":for(let n=0;n<t.rings.length;n++)u(s,t.rings[n],!!t.hasZ);break;case"multipoint":u(s,t.points,!!t.hasZ);break;case"extent":s[0]=t.xmin,s[1]=t.ymin,s[3]=t.xmax,s[4]=t.ymax,t.zmin!=null&&(s[2]=t.zmin),t.zmax!=null&&(s[5]=t.zmax)}return s}function N(t,s){switch(h(s),t.type==="mesh"&&(t=t.extent),t.type){case"point":s[0]=s[2]=t.x,s[1]=s[3]=t.y;break;case"polyline":for(let n=0;n<t.paths.length;n++)o(s,t.paths[n]);break;case"polygon":for(let n=0;n<t.rings.length;n++)o(s,t.rings[n]);break;case"multipoint":o(s,t.points);break;case"extent":s[0]=t.xmin,s[1]=t.ymin,s[2]=t.xmax,s[3]=t.ymax}}function R(t,s){return t.objectId!=null?t.objectId:t.attributes&&s?t.attributes[s]:null}function $(t,s,n,e){if(s!=null&&s.size&&n!=null&&t)for(const i in t){if(!s.has(i))continue;const a=t[i];typeof a=="string"&&a.length>n&&(e(i),t[i]="")}}export{w as F,R,Z as b,I as d,f as e,k as i,v as n,z as t,F as v,$ as w,j as x,N as z};
