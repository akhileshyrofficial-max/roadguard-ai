import{x as V,cm as U,i as X,at as Y,c as n,m as a,d as D}from"./Identifiable-B58w9FD1.js";import{w as E}from"./vec32-BBi6eWk8.js";import{U as F,O as j}from"./projectionUtils-DsK_8mH5.js";import{P as W}from"./normalizeUtils-DiYDtdl8.js";import{u as H}from"./scaleUtils-BWXUbMYz.js";import{l as I,u as T,t as _}from"./gridUtils-B4hG5oiH.js";import{f as d,d as k,c as q}from"./hitTestSelectUtils-ByTX4qSK.js";import{r as G,a as A}from"./RouteLayerInteraction-DhT-tUlj.js";import"./index-VFfT8Aji.js";import"./common-DQOJ18NT.js";import"./normalizeUtilsCommon-BcGwSELE.js";import"./jsonUtils-rvWrjUVI.js";import"./utils-DM3VuI_N.js";import"./utils-Kw6dbpdX.js";import"./geodesicUtils-aAgfbhCp.js";import"./Cyclical-SUfr0Hlv.js";import"./quantityUtils-CebuAsVX.js";import"./vec2-ChnYg_BJ.js";import"./vec2f64-Cgb6qxNH.js";import"./projectVectorToVector-_cm4joq-.js";import"./projectPointToVector-DXXhVA1_.js";import"./fieldUtils-5LubkA3t.js";import"./Layer-C63inyUN.js";import"./Query-B1Zd9wiX.js";import"./typeUtils-BD6Rtzmx.js";import"./Field-BoWr0HZE.js";import"./fieldType-CgljAswg.js";import"./MapView-xTo1x6Jl.js";import"./CollectionFlattener-DpJZcuE9.js";import"./workers-BRuHQO5o.js";import"./Queue-CM5__kwh.js";import"./intl-BHHnlw1J.js";import"./number-kTr8sdcN.js";import"./TileInfo-D4DTS484.js";import"./TileKey-DZd6gJy7.js";import"./jsxFactory-MlcfH8Vy.js";import"./uuid-Cl5lrJ4c.js";import"./sanitizerUtils-CJlLEeXg.js";import"./UpdatingHandles-Lv1GUel8.js";import"./asyncUtils-C5b0g4Vr.js";import"./signal-Cxu9Z1Kf.js";import"./Map-BQwbVliJ.js";import"./Basemap-BLSYwfav.js";import"./loadAll-CbqpgDCk.js";import"./PortalItem-DLsR4Y2a.js";import"./writeUtils-Bje94ctQ.js";import"./layerUtils-CAMu1s-2.js";import"./persistable-glrbGfu8.js";import"./MD5-C9MwAd2G.js";import"./multiOriginJSONSupportUtils-C0wm8_Yw.js";import"./resourceExtension-CXue4rJ6.js";import"./PolygonCollection-DoAtzYfB.js";import"./mat4f32-Djp3mnm5.js";import"./mat4-CggL8WYf.js";import"./TablesMixin-CnCDLfmO.js";import"./GraphicsCollection-CixPPU0K.js";import"./Graphic-sBrqQAPW.js";import"./PopupTemplate-D_WeQBNh.js";import"./createFeatureId-BiB9j2WD.js";import"./typeUtils-Du36Z1Jr.js";import"./SimpleMarkerSymbol-B18xir4G.js";import"./screenUtils-aQeO9QTD.js";import"./aaBoundingBox-CGMzNzJN.js";import"./TextSymbol-C7i9ol-5.js";import"./PictureMarkerSymbol-D6pzvUP4.js";import"./HeightModelInfo-DBDBaZ2u.js";import"./timeZoneUtils-DlgpSZrP.js";import"./ReactiveMap-D39lG9XE.js";import"./ViewingMode-Chk7YAAL.js";import"./enums-oVqQqnoy.js";import"./TileKey-DZRgo92L.js";import"./quickselect-QQC62dOK.js";import"./mat3-CruJiiUv.js";import"./vec2f32-CaVKkSa6.js";import"./Scheduler-BH9l6DUT.js";import"./unitBezier-B1N-tmtC.js";import"./definitions-CASyCajO.js";import"./enums-UBzvFP7O.js";import"./Texture-BXXxnW90.js";import"./getDataTypeBytes-D2DiHx_d.js";import"./imageUtils-CcEg-3Il.js";import"./capabilities-Cggz07g5.js";import"./ILyr3DWasmPerSceneView-CIC-HPGZ.js";import"./Version-B0YYd6Ho.js";import"./vec42-CKs01hkn.js";import"./vec4f64-DPb6J-GU.js";import"./plane-C4pzHMdp.js";import"./vectorStacks-BEpDSRxH.js";import"./mat3f64-B5o_lm6j.js";import"./mat4f64-q_b6UJoq.js";import"./quatf64-aQ5IuZRd.js";import"./sphere-BTK9a7ED.js";import"./elevationInfoUtils-BpDJq1uD.js";import"./ElevationInfo-0ccmO6of.js";import"./lengthUtils-DEvA7X52.js";import"./spatialReferenceEllipsoidUtils-U_tEFhD2.js";import"./GraphicsLayer-DiGOhhuQ.js";import"./BlendLayer-ZjS29wea.js";import"./layerContainerType-C5CzMsLd.js";import"./jsonUtils-DI0kf7Dd.js";import"./parser-NZ6dFu80.js";import"./ScaleRangeLayer-Ci7jgVw5.js";import"./Stop-BWzFXSEc.js";import"./networkEnums-BDHMASSX.js";import"./geodeticLengthOperator-DnIP1hCn.js";import"./geodeticCurveType-CirnHLSB.js";import"./earcut-D9gy186-.js";import"./triangle-BHW4KDad.js";import"./lineSegment-D4GoMluZ.js";let p=class extends V{constructor(t){super(t),this.options=null}destroy(){this._set("options",null)}get grid(){return this.view.grid}get effectiveViewRotation(){var t;return(t=this.grid)!=null&&t.rotateWithMap?0:U(this.view.rotation??0)}get gridRotation(){var t;return U(((t=this.grid)==null?void 0:t.rotation)??0)}get gridCenter(){var r;const{spatialReference:t,grid:e}=this;if(!e||!t||!F(e.center.spatialReference,t))return null;try{const i=j(e.center,t),o=t.isWrappable&&((r=this.view)==null?void 0:r.center)!=null?W(i.x,this.view.center.x,t):i.x;return d(o,i.y,i.z)}catch(i){return X.getLogger(this).errorOnce("Grid Snapping - Failed to project grid center.",i),null}}get offsetScaleFactor(){const{pixelsPerStride:t,grid:e}=this;if(!e||!t)return 1;const{majorLineInterval:r,dynamicScaling:i}=e;return r<1?null:I(r,t,i)}get spatialReference(){return this.view.spatialReference}get gridMetersPerStride(){const{grid:t}=this;return t?Y(t.spacing,t.units,"meters"):null}get viewMetersPerPixel(){const{viewMetersPerSRUnit:t}=this;return t==null?null:t*H(this.view.scale,this.view.spatialReference)}get viewMetersPerSRUnit(){const{spatialReference:t}=this.view;return this.gridCenter?T(this.gridCenter[0],this.gridCenter[1],t):null}get pixelsPerStride(){const{gridMetersPerStride:t,viewMetersPerPixel:e}=this;return e&&t?t/e:null}get updating(){return this.grid!=null&&this.spatialReference!=null&&this.viewMetersPerSRUnit==null}async fetchCandidates(t,e,r){var l;const{options:i,view:o}=this;if(!(i!=null&&i.effectiveGridEnabled)||!o.grid||(l=r.feature)!=null&&l.attributes&&k in r.feature.attributes)return[];const s=r.coordinateHelper.arrayToPoint(t),m=i.distance*(r.pointer==="touch"?i.touchSensitivityMultiplier:1);return this.fetchCandidatesSync(s,m)}fetchCandidatesSync(t,e){const r=[],{grid:i,effectiveViewRotation:o,gridRotation:s,gridCenter:m,viewMetersPerPixel:l,viewMetersPerSRUnit:f,offsetScaleFactor:S,spatialReference:g,gridMetersPerStride:C,pixelsPerStride:$}=this;if(!(i&&l&&f&&m&&g&&S&&C&&$)||!i.dynamicScaling&&$<_||!F(t.spatialReference,g))return r;const y=j(t,g),z=d(y.x,y.y,y.z),u=h(z,-s,m,-o),P=C/f*S,c=B(u,P,m),{shouldSnapX:w,shouldSnapY:v}=J(c,u,e,l,f);if(!w&&!v)return[];const L=d((w?c:u)[0],(v?c:u)[1]),M=h(L,s,m,o),b=h(c,s,m,o);if(v){const R=O(c,u,P,"y"),x=h(R,s,m,o);r.push(new G({lineStart:b,lineEnd:x,targetPoint:M,isDraped:!1}))}if(w){const R=O(c,u,P,"x"),x=h(R,s,m,o);r.push(new G({lineStart:b,lineEnd:x,targetPoint:M,isDraped:!1}))}return w&&v&&r.push(new A(M,r[0],r[1],!1)),r}};n([a({constructOnly:!0})],p.prototype,"view",void 0),n([a()],p.prototype,"options",void 0),n([a()],p.prototype,"grid",null),n([a()],p.prototype,"effectiveViewRotation",null),n([a()],p.prototype,"gridRotation",null),n([a()],p.prototype,"gridCenter",null),n([a()],p.prototype,"offsetScaleFactor",null),n([a()],p.prototype,"spatialReference",null),n([a()],p.prototype,"gridMetersPerStride",null),n([a()],p.prototype,"viewMetersPerPixel",null),n([a()],p.prototype,"viewMetersPerSRUnit",null),n([a()],p.prototype,"pixelsPerStride",null),n([a()],p.prototype,"updating",null),p=n([D("esri.views.interactive.snapping.GridSnappingEngine")],p);const h=(t,e,r,i)=>{const o=q(t[0],t[1],t[2]);return E(o,E(o,o,r,e),r,i)},B=(t,e,r)=>{const i=(t[0]-r[0])/e,o=(t[1]-r[1])/e,s=Math.trunc(i),m=Math.trunc(o),l=Math.round(i%1),f=Math.round(o%1),S=r[0]+(s+l)*e,g=r[1]+(m+f)*e;return d(S,g)},J=(t,e,r,i,o)=>{if(i<=0)return{shouldSnapX:!1,shouldSnapY:!1};const s=(t[0]-e[0])/i,m=(t[1]-e[1])/i;return{shouldSnapX:Math.abs(s*o)<r,shouldSnapY:Math.abs(m*o)<r}},O=(t,e,r,i)=>{if(i==="y"){const s=e[0]>t[0]?1:-1;return d(t[0]+r*s,t[1])}const o=e[1]>t[1]?1:-1;return d(t[0],t[1]+r*o)};export{p as GridSnappingEngine};
