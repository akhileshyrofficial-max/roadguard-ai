import{i as C,s as O,n as b,aS as h}from"./Identifiable-BjM0PfdN.js";import{i as x}from"./colorUtils-Da3inJZr.js";import{Z as S}from"./FieldsIndex-CZ9IrKuX.js";import{h as k}from"./ArcadeExpression-BVYrSaqO.js";import{H as g,Y as M,X as N,F as P,a as w,s as T,O as $}from"./utils-Civwinu0.js";import{B as G,H as E,D as A,C as F}from"./quantizationUtils-D70gL1s4.js";function I(p,e,r,t,i,s){if(p==null)return null;const o=p.references("geometry")&&s?L(e,t,s):e,n=p.repurposeFeature(o,i);try{return p.evaluate(n,r)}catch(c){return C.getLogger("esri.views.2d.support.arcadeOnDemand").warn("Feature arcade evaluation failed:",c),null}}const u=new Map;function L(p,e,r){const{transform:t,hasZ:i,hasM:s}=r;u.has(e)||u.set(e,D(e));const o=u.get(e)(p.geometry,t,i,s);return{...p,geometry:o}}function D(p){const e={};switch(p){case"esriGeometryPoint":return(r,t,i,s)=>F(t,e,r,i,s);case"esriGeometryPolygon":return(r,t,i,s)=>A(t,e,r,i,s);case"esriGeometryPolyline":return(r,t,i,s)=>E(t,e,r,i,s);case"esriGeometryMultipoint":return(r,t,i,s)=>G(t,e,r,i,s);default:return C.getLogger("esri.views.2d.support.arcadeOnDemand").error(new O("mapview-arcade",`Unable to handle geometryType: ${p}`)),r=>r}}const J=Object.freeze(Object.defineProperty({__proto__:null,default:I},Symbol.toStringTag,{value:"Module"})),R=p=>{if(!p)return[0,0,0,0];const{r:e,g:r,b:t,a:i}=p;return[e,r,t,255*i]},a=class a{static findApplicableOverrides(e,r,t){if(e&&r){if(e.primitiveName){let i=!1;for(const s of t)if(s.primitiveName===e.primitiveName){i=!0;break}if(!i)for(const s of r)s.primitiveName===e.primitiveName&&t.push(s)}switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":if(e.effects)for(const i of e.effects)a.findApplicableOverrides(i,r,t);if(e.symbolLayers)for(const i of e.symbolLayers)a.findApplicableOverrides(i,r,t);break;case"CIMTextSymbol":break;case"CIMSolidStroke":case"CIMPictureStroke":case"CIMGradientStroke":case"CIMSolidFill":case"CIMPictureFill":case"CIMHatchFill":case"CIMGradientFill":case"CIMVectorMarker":case"CIMCharacterMarker":case"CIMPictureMarker":if(e.effects)for(const i of e.effects)a.findApplicableOverrides(i,r,t);if(e.markerPlacement&&a.findApplicableOverrides(e.markerPlacement,r,t),e.type==="CIMVectorMarker"){if(e.markerGraphics)for(const i of e.markerGraphics)a.findApplicableOverrides(i,r,t),a.findApplicableOverrides(i.symbol,r,t)}else e.type==="CIMCharacterMarker"?a.findApplicableOverrides(e.symbol,r,t):e.type==="CIMHatchFill"?a.findApplicableOverrides(e.lineSymbol,r,t):e.type==="CIMPictureMarker"&&a.findApplicableOverrides(e.animatedSymbolProperties,r,t)}}}static findEffectOverrides(e,r){if(!e)return null;if(e.type==="CIMGeometricEffectDashes"&&g(e),!r||!e.primitiveName)return{type:"cim-effect-param",effect:e,overrides:[]};const t=M(e),i=e.primitiveName,s=[];for(const o of r)o.primitiveName===i&&s.push(M(o));return{type:"cim-effect-param",effect:t,overrides:N(s)}}static async resolveSymbolOverrides(e,r,t,i,s,o,n){if(!(e!=null&&e.symbol))return null;let{symbol:c,primitiveOverrides:l}=e;const y=!!l;if(!y&&!i)return c;c=b(c),l=b(l);let v=!0;if(r||(r={attributes:{}},v=!1),y){if(v||(l=l.filter(m=>{var f;return!((f=m.valueExpressionInfo)!=null&&f.expression.includes("$feature"))})),n||(l=l.filter(m=>{var f;return!((f=m.valueExpressionInfo)!=null&&f.expression.includes("$view"))})),l.length>0){const m=P(r.attributes),f={spatialReference:t,fields:m,geometryType:s};await a.createRenderExpressions(l,f),a.evaluateOverrides(l,r,s??"esriGeometryPoint",o,n,new S(m))}a.applyOverrides(c,l)}return i&&a.applyDictionaryTextOverrides(c,r,i,null),c}static async createRenderExpressions(e,r){const t=[];for(const i of e){const s=i.valueExpressionInfo;if(!s||a._expressionToRenderExpression.has(s.expression))continue;const o=k(s.expression,r.spatialReference);t.push(o),o.then(n=>a._expressionToRenderExpression.set(s.expression,n))}t.length>0&&await Promise.all(t)}static evaluateOverrides(e,r,t,i,s,o){const n={$view:{scale:s==null?void 0:s.scale}};for(const c of e){c.value&&typeof c.value=="object"&&x(c.value)&&(c.propertyName==="Color"||c.propertyName==="StrokeColor")&&(c.value=R(c.value));const l=c.valueExpressionInfo;if(!l)continue;const y=a._expressionToRenderExpression.get(l.expression);y&&(c.value=I(y,r,n,t,o,i))}}static applyDictionaryTextOverrides(e,r,t,i,s="Normal"){if(e!=null&&e.type)switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":case"CIMTextSymbol":{const o=e.symbolLayers;if(!o)return;for(const n of o)n&&n.type==="CIMVectorMarker"&&a.applyDictionaryTextOverrides(n,r,t,i,e.type==="CIMTextSymbol"?e.textCase:s)}break;case"CIMVectorMarker":{const o=e.markerGraphics;if(!o)return;for(const n of o)n&&a.applyDictionaryTextOverrides(n,r,t,i)}break;case"CIMMarkerGraphic":{const o=e.textString;if(o&&o.includes("[")){const n=w(o,t);e.textString=T(r,n,i,s)}}}}static applyOverrides(e,r,t,i){if(e.primitiveName){for(const s of r)if(s.primitiveName===e.primitiveName){const o=$(s.propertyName);if(i&&i.push({cim:e,nocapPropertyName:o,value:e[o]}),t){let n=!1;for(const c of t)c.primitiveName===e.primitiveName&&(n=!0);n||t.push(s)}s.value!=null&&(e[o]=s.value)}}switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":if(e.effects)for(const s of e.effects)a.applyOverrides(s,r,t,i);if(e.symbolLayers)for(const s of e.symbolLayers)a.applyOverrides(s,r,t,i);break;case"CIMTextSymbol":break;case"CIMSolidStroke":case"CIMSolidFill":case"CIMVectorMarker":if(e.effects)for(const s of e.effects)a.applyOverrides(s,r,t,i);if(e.type==="CIMVectorMarker"&&e.markerGraphics)for(const s of e.markerGraphics)a.applyOverrides(s,r,t,i),a.applyOverrides(s.symbol,r,t,i)}}static restoreOverrides(e){for(const r of e)r.cim[r.nocapPropertyName]=r.value}static buildOverrideKey(e){let r="";for(const t of e)t.value!==void 0&&(r+=`${t.primitiveName}${t.propertyName}${JSON.stringify(t.value)}`);return r}static toValue(e,r){if(e==="DashTemplate")return r.split(" ").map(t=>Number(t));if(e==="Color"){const t=new h(r).toRgba();return t[3]*=255,t}return r}};a._expressionToRenderExpression=new Map;let d=a;const K=Object.freeze(Object.defineProperty({__proto__:null,OverrideHelper:d},Symbol.toStringTag,{value:"Module"}));export{K as O,J as c,d as v};
