import{T as N,a3 as T,c as d,m as g,d as B,a0 as U,H as O,V as F,l as W,z as K,u as I,al as E,dT as j,cy as H,dU as J}from"./Identifiable-BjM0PfdN.js";import{K as Y,O as A}from"./projectionUtils-D3_kHwH-.js";import{b as P,g as Q,d as X}from"./kmlUtils-DPcFSMht.js";import{f as Z}from"./utils-C83x6Enz.js";import{c as M}from"./GraphicsCollection-B9Sj62PJ.js";import{g as tt,f as it,S as et}from"./BitmapTechnique-DlfexCfL.js";import{r as rt}from"./BitmapContainer-xK1TasUF.js";import{S as ot,u as at}from"./LayerView-CLiTpaAu.js";import{t as R}from"./GraphicContainer-sBPYGhV3.js";import{O as k}from"./GraphicsView2D-3SzwPKyv.js";import{execute as st}from"./projectOperator-DBmh5KQk.js";import{_ as nt,s as pt,v as lt}from"./rasterProjectionHelper-DVEIfjiz.js";import{v as mt,o as ht,n as ct}from"./RenderingContext-DcajNlEA.js";import{P as q,M as dt,X as ut}from"./enums-UBzvFP7O.js";import{R as gt}from"./FramebufferObject-DxGXUHGJ.js";import{m as _t}from"./rasterUtils-C2r1ETwn.js";import{a as L,S as wt}from"./Texture-I7zBxmlP.js";import"./index-CVvIVqY1.js";import"./PopupTemplate-CF36_3mn.js";import"./fieldUtils-Br-fPSxS.js";import"./aaBoundingBox-BrXqvn3i.js";import"./jsonUtils-Bc5jw-8H.js";import"./typeUtils-vKjb0E8i.js";import"./ClassBreaksRenderer-2NW_j7bV.js";import"./commonProperties-DMnf_yWT.js";import"./colorRamps-BRrX9yVq.js";import"./ColorStop-5uJISB8q.js";import"./screenUtils-aQeO9QTD.js";import"./visualVariableUtils-D9hF7KBy.js";import"./Graphic-C2Bnzy89.js";import"./jsonUtils-DBuABSQZ.js";import"./typeUtils-U-Zf11cK.js";import"./createFeatureId-BiB9j2WD.js";import"./typeUtils-CP9PJ8Sp.js";import"./SimpleMarkerSymbol-D-X_CJ8B.js";import"./TextSymbol-DPyc43q3.js";import"./PictureMarkerSymbol-DOPylmLK.js";import"./lengthUtils-BDJ7rNGW.js";import"./jsonUtils-0dtnZsjW.js";import"./layerUtils-CmDKJw7q.js";import"./defaults3D-BGxlF4_A.js";import"./defaults-DZVYugxa.js";import"./defaultsJSON-GKolV7NZ.js";import"./RendererLegendOptions-Dm8mjmQN.js";import"./LRUCache-eBEVKbNU.js";import"./MemCache-CUhFgUMJ.js";import"./DictionaryScriptEvaluator-CuBKcLRo.js";import"./Version-CWer4Z2d.js";import"./FieldsIndex-CZ9IrKuX.js";import"./UnknownTimeZone-C7APdNSb.js";import"./timeZoneUtils-DMYcWBGI.js";import"./ArcadeExpression-BVYrSaqO.js";import"./TimeOnly-BKNTMEoH.js";import"./enum-C-GuSG8G.js";import"./utils-Civwinu0.js";import"./defaultCIMValues-BrbaHf9c.js";import"./enums-BPiq_WIC.js";import"./heatmapUtils-CjJeZ5Pu.js";import"./vec42-CKs01hkn.js";import"./common-DQOJ18NT.js";import"./vec4f64-DPb6J-GU.js";import"./SimpleRenderer-DtNv2-NG.js";import"./UniqueValueRenderer-B64Ao_xz.js";import"./diffUtils-B0wxD3C_.js";import"./styleUtils-qogXp5hy.js";import"./FeatureSet-CfhGyZLm.js";import"./Field-FVkerAtx.js";import"./fieldType-ClovGbuQ.js";import"./mat3-CruJiiUv.js";import"./MapView-XXhq0wAO.js";import"./Cyclical-B0bcmwRe.js";import"./CollectionFlattener-CiW0r4Pq.js";import"./workers-BNUpPbJD.js";import"./Queue-DILFUEQB.js";import"./intl-ByqrfC_d.js";import"./number-CsIuR4Me.js";import"./TileInfo-gIGeOzNG.js";import"./TileKey-DZd6gJy7.js";import"./jsxFactory-D4gVuCa_.js";import"./uuid-Cl5lrJ4c.js";import"./sanitizerUtils-CJlLEeXg.js";import"./UpdatingHandles-DdU5IX8L.js";import"./asyncUtils-zc5DpkIL.js";import"./signal-CHoLd7Dm.js";import"./Map-C7AlwcQg.js";import"./Basemap-DEy_TBwO.js";import"./loadAll-tu8QdrIx.js";import"./PortalItem-5OKFVWCx.js";import"./writeUtils-DJnvrJq1.js";import"./persistable-Dy9UTZKT.js";import"./MD5-C9MwAd2G.js";import"./multiOriginJSONSupportUtils-C0wm8_Yw.js";import"./resourceExtension-B5tMzp3X.js";import"./PolygonCollection-CkOPuE2h.js";import"./mat4f32-Djp3mnm5.js";import"./mat4-C8ai-EIY.js";import"./TablesMixin-N_koq_xq.js";import"./Layer-CUjb8Y3m.js";import"./HeightModelInfo-BaIW4m76.js";import"./ReactiveMap-sVzP5DGX.js";import"./Query-duJofNa2.js";import"./ViewingMode-Chk7YAAL.js";import"./vec2-ChnYg_BJ.js";import"./vec2f64-Cgb6qxNH.js";import"./enums-BuAlJCBy.js";import"./TileKey-DR2srngJ.js";import"./quickselect-QQC62dOK.js";import"./normalizeUtils-DfEBCyY7.js";import"./normalizeUtilsCommon-Bp_cDVNc.js";import"./utils-CFSOSud-.js";import"./vec2f32-CaVKkSa6.js";import"./Scheduler-COHy2lsX.js";import"./vec32-rHWgUfNj.js";import"./unitBezier-B1N-tmtC.js";import"./definitions-CASyCajO.js";import"./imageUtils-CKvAsRxn.js";import"./capabilities-Cggz07g5.js";import"./ILyr3DWasmPerSceneView-CIC-HPGZ.js";import"./Container-Dh4YuLhU.js";import"./parser-BAKViB6V.js";import"./GraphShaderModule-vUIflZOb.js";import"./ProgramTemplate-BJvNm4_p.js";import"./memoryEstimations-m6Z1UQ7X.js";import"./ShaderBuilder-CVhDmvmz.js";import"./BindType-BBwFZqyN.js";import"./TechniqueType-CFPo0AVB.js";import"./bitmapUtils-Mvsl7uVV.js";import"./WGLContainer-BfNvqaHf.js";import"./Utils-C7F0koJ1.js";import"./getDataTypeBytes-D2DiHx_d.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./vec3f32-WCVSSNPR.js";import"./StyleDefinition-C4LQ4gTA.js";import"./config-DHajyIwB.js";import"./earcut-D9gy186-.js";import"./featureConversionUtils-CpHGKGMV.js";import"./OptimizedFeature-DwEGrxrA.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./layerViewUtils-BaHdVB92.js";import"./AGraphicContainer-3lbOG70M.js";import"./TechniqueInstance-D5uticL1.js";import"./UpdateTracking2D-D-BklBCo.js";import"./BidiEngine-QXap_35O.js";import"./GeometryUtils-DZ7Gm0us.js";import"./rasterizingUtils-DbYVqSTS.js";import"./floatRGBA-BCeZwSgH.js";import"./Rect-CUzevAry.js";import"./TileContainer-D3qnVZFx.js";import"./FeatureCommandQueue-CD7SjxYe.js";import"./utils-CYQStVwU.js";import"./constants-BFLErLYb.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-7OvtbouS.js";import"./OverrideHelper-Cpw4NAcE.js";import"./colorUtils-Da3inJZr.js";import"./quantizationUtils-D70gL1s4.js";import"./AttributeStore-ChriEgvw.js";import"./labelUtils-NFOL2PSf.js";import"./queryUtils-BLXKDnEb.js";import"./json-Wa8cmqdu.js";import"./timeSupport-CZ5VO20t.js";import"./normalizeUtilsSync-EBe9_AkK.js";import"./mat3f64-B5o_lm6j.js";import"./dehydratedFeatures-DL7ak8y5.js";import"./SimpleGeometryCursor-B92kdZ15.js";import"./webglDeps-C9ED_iEO.js";import"./NestedMap-C3hRTnZR.js";import"./renderState-vHoqBeQT.js";import"./basicInterfaces-CZwQPxTp.js";import"./glsl-Cj7KC756.js";import"./testSVGPremultipliedAlpha-CfjOcJyp.js";let _=class extends N{constructor(){super(...arguments),this.id=0,this.rotation=0,this.href="",this.extent=new T}};d([g({nonNullable:!0,json:{write:!0}})],_.prototype,"id",void 0),d([g({nonNullable:!0,json:{write:!0}})],_.prototype,"rotation",void 0),d([g({nonNullable:!0,json:{write:!0}})],_.prototype,"href",void 0),d([g({type:T,nonNullable:!0,json:{write:!0}})],_.prototype,"extent",void 0),_=d([B("esri.layers.support.KMLMapImage")],_);const m=class m{constructor(t){if(this._ownsRctx=!1,t)this._ownsRctx=!1,this._rctx=t;else{if(m._instance)return m._instanceRefCount++,m._instance;m._instanceRefCount=1,m._instance=this,this._ownsRctx=!0;const r=document.createElement("canvas").getContext("webgl2");r.getExtension("OES_texture_float"),this._rctx=new mt(r,{})}const o={applyProjection:!0,bilinear:!1,bicubic:!1},a=ht("raster/reproject","raster/reproject",new Map([["a_position",0]]),o);this._program=this._rctx.programCache.acquire(a.shaders.vertexShader,a.shaders.fragmentShader,a.attributes),this._rctx.useProgram(this._program),this._program.setUniform1f("u_opacity",1),this._program.setUniform1i("u_image",0),this._program.setUniform1i("u_flipY",0),this._program.setUniform1i("u_transformGrid",1),this._quad=new ct(this._rctx,[0,0,1,0,0,1,1,1])}reprojectTexture(t,o,a=!1){const r=st(t.extent,o),e=new U({x:(t.extent.xmax-t.extent.xmin)/t.texture.descriptor.width,y:(t.extent.ymax-t.extent.ymin)/t.texture.descriptor.height,spatialReference:t.extent.spatialReference}),{x:n,y:l}=nt(e,o,t.extent);let p=(n+l)/2;const h=Math.round((r.xmax-r.xmin)/p),s=Math.round((r.ymax-r.ymin)/p);p=(r.width/h+r.height/s)/2;const D=new U({x:p,y:p,spatialReference:r.spatialReference}),f=pt({projectedExtent:r,srcBufferExtent:t.extent,pixelSize:D,hasWrapAround:!0,spacing:[16,16]}),x=_t(this._rctx,f),b=new L(h,s);b.wrapMode=q.CLAMP_TO_EDGE;const c=new gt(this._rctx,b);this._rctx.bindFramebuffer(c),this._rctx.setViewport(0,0,h,s),this._rctx.useProgram(this._program),this._rctx.bindTexture(t.texture,0),this._rctx.bindTexture(x,1),this._quad.bind();const{width:V=0,height:v=0}=t.texture.descriptor;if(this._program.setUniform2f("u_srcImageSize",V,v),this._program.setUniform2fv("u_transformSpacing",f.spacing),this._program.setUniform2fv("u_transformGridSize",f.size),this._program.setUniform2f("u_targetImageSize",h,s),this._quad.draw(),this._quad.unbind(),this._rctx.useProgram(null),this._rctx.bindFramebuffer(null),x.dispose(),a){const{width:u,height:C}=c,y=new ImageData(u??0,C??0);c.readPixels(0,0,u??0,C??0,dt.RGBA,ut.UNSIGNED_BYTE,y.data);const G=c.detachColorTexture();return c.dispose(),{texture:G,extent:r,imageData:y}}const S=c.detachColorTexture();return c.dispose(),{texture:S,extent:r}}reprojectBitmapData(t,o){const a=tt(t.bitmapData)?it(t.bitmapData):t.bitmapData,r=new L;r.wrapMode=q.CLAMP_TO_EDGE,r.width=t.bitmapData.width,r.height=t.bitmapData.height;const e=new wt(this._rctx,r,a),n=this.reprojectTexture({texture:e,extent:t.extent},o,!0);n.texture.dispose();const l=document.createElement("canvas"),p=n.imageData;return l.width=p.width,l.height=p.height,l.getContext("2d").putImageData(p,0,0),{bitmapData:l,extent:n.extent}}async loadAndReprojectBitmapData(t,o,a){const[r]=await Promise.all([O(t,{responseType:"image"}).then(h=>h.data),lt()]),e=document.createElement("canvas");e.width=r.width,e.height=r.height;const n=e.getContext("2d");n.drawImage(r,0,0);const l=n.getImageData(0,0,e.width,e.height);if(o.spatialReference.equals(a))return{bitmapData:l,extent:o};const p=this.reprojectBitmapData({bitmapData:l,extent:o},a);return{bitmapData:p.bitmapData,extent:p.extent}}destroy(){this._ownsRctx?(m._instanceRefCount--,m._instanceRefCount===0&&(this._quad.dispose(),this._program.dispose(),this._rctx.dispose(),m._instance=null)):(this._quad.dispose(),this._program.dispose())}};m._instanceRefCount=0;let $=m;class z{constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]}}let w=class extends ot(at){constructor(){super(...arguments),this._bitmapIndex=new Map,this._mapImageContainer=new rt,this._kmlVisualData=new z,this._fetchController=null,this.allVisiblePoints=new M,this.allVisiblePolylines=new M,this.allVisiblePolygons=new M,this.allVisibleMapImages=new F}async hitTest(i,t){var a,r,e;const o=this.layer;return[(a=this._pointsView)==null?void 0:a.hitTest(i),(r=this._polylinesView)==null?void 0:r.hitTest(i),(e=this._polygonsView)==null?void 0:e.hitTest(i)].flat().filter(Boolean).map(n=>(n.layer=o,n.sourceLayer=o,{type:"graphic",graphic:n,layer:o,mapPoint:i}))}update(i){this._polygonsView&&this._polygonsView.processUpdate(i),this._polylinesView&&this._polylinesView.processUpdate(i),this._pointsView&&this._pointsView.processUpdate(i)}attach(){this._fetchController=new AbortController,this.container.addChild(this._mapImageContainer),this._polygonsView=new k({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new R(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new k({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new R(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new k({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new R(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.addAttachHandles([this.allVisibleMapImages.on("change",i=>{i.added.forEach(t=>this._addMapImage(t)),i.removed.forEach(t=>this._removeMapImage(t))}),W(()=>this.layer.visibleSublayers,i=>{for(const t of this._kmlVisualData.allSublayers.values())t.visibility=0;for(const t of i){const o=this._kmlVisualData.allSublayers.get(t.id);o&&(o.visibility=1)}this._refreshCollections()})]),this._updatingHandles.addPromise(this._fetchService(this._fetchController.signal)),this._imageReprojector=new $}detach(){this._fetchController=K(this._fetchController),this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView=I(this._polygonsView),this._polylinesView=I(this._polylinesView),this._pointsView=I(this._pointsView),this._imageReprojector=I(this._imageReprojector)}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(i){var t,o;((t=this.view.spatialReference)!=null&&t.isWGS84||(o=this.view.spatialReference)!=null&&o.isWebMercator)&&this._imageReprojector.loadAndReprojectBitmapData(i.href,i.extent,this.view.spatialReference).then(a=>{const r=new et(a.bitmapData);r.x=a.extent.xmin,r.y=a.extent.ymax,r.resolution=a.extent.width/a.bitmapData.width,r.rotation=i.rotation,this._mapImageContainer.addChild(r),this._bitmapIndex.set(i,r)})}async _getViewDependentUrl(i,t){const{viewFormat:o,viewBoundScale:a,httpQuery:r}=i;if(o!=null){if(t==null)throw new Error("Loading this network link requires a view state.");let e;if(await Y(),a!=null&&a!==1){const u=new T(t.extent);u.expand(a),e=u}else e=t.extent;e=A(e,E.WGS84);const n=A(e,E.WebMercator),l=e.xmin,p=e.xmax,h=e.ymin,s=e.ymax,D=t.size[0]*t.pixelRatio,f=t.size[1]*t.pixelRatio,x=Math.max(n.width,n.height),b={"[bboxWest]":l.toString(),"[bboxEast]":p.toString(),"[bboxSouth]":h.toString(),"[bboxNorth]":s.toString(),"[lookatLon]":e.center.x.toString(),"[lookatLat]":e.center.y.toString(),"[lookatRange]":x.toString(),"[lookatTilt]":"0","[lookatHeading]":t.rotation.toString(),"[lookatTerrainLon]":e.center.x.toString(),"[lookatTerrainLat]":e.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":e.center.x.toString(),"[cameraLat]":e.center.y.toString(),"[cameraAlt]":x.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":D.toString(),"[vertPixels]":f.toString(),"[terrainEnabled]":"0","[clientVersion]":J,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},c=u=>{for(const C in u){let y;for(y in b)u[C]=u[C].replace(y,b[y])}},V=j(o);c(V);let v={};r!=null&&(v=j(r),c(v));const S=Z(i.href);return S.query={...S.query,...V,...v},`${S.path}?${H(V)}`}return i.href}async _fetchService(i){const t=new z;await this._loadVisualData(this.layer.url,t,i),this._kmlVisualData=t,this._refreshCollections()}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i))}_isSublayerVisible(i){const t=this._kmlVisualData.allSublayers.get(i);return!!(t!=null&&t.visibility)&&(t.parentFolderId===-1||this._isSublayerVisible(t.parentFolderId))}_loadVisualData(i,t,o){return this._fetchParsedKML(i,o).then(async a=>{var r;for(const e of a.sublayers){t.allSublayers.set(e.id,e);const n=e.points?await P(e.points):[],l=e.polylines?await P(e.polylines):[],p=e.polygons?await P(e.polygons):[],h=((r=e.mapImages)==null?void 0:r.map(s=>_.fromJSON(s)))??[];if(t.allPoints.push(...n.map(s=>({item:s,sublayerId:e.id}))),t.allPolylines.push(...l.map(s=>({item:s,sublayerId:e.id}))),t.allPolygons.push(...p.map(s=>({item:s,sublayerId:e.id}))),t.allMapImages.push(...h.map(s=>({item:s,sublayerId:e.id}))),e.networkLink){const s=await this._getViewDependentUrl(e.networkLink,this.view.state);await this._loadVisualData(s,t,o)}}})}_fetchParsedKML(i,t){return Q(i,this.layer.spatialReference,this.layer.refreshInterval,t).then(o=>X(o.data))}_removeMapImage(i){const t=this._bitmapIndex.get(i);t&&(this._mapImageContainer.removeChild(t),this._bitmapIndex.delete(i))}};d([g()],w.prototype,"_pointsView",void 0),d([g()],w.prototype,"_polylinesView",void 0),d([g()],w.prototype,"_polygonsView",void 0),d([g()],w.prototype,"updating",void 0),w=d([B("esri.views.2d.layers.KMLLayerView2D")],w);const Dr=w;export{Dr as default};
